From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from mailgw02.mediatek.com (unknown [210.61.82.184])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 4195521ABC5
	for <linux-kernel@vger.kernel.org>; Wed, 30 Apr 2025 08:27:37 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=210.61.82.184
ARC-Seal:i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1746001660; cv=none; b=m+VyUFrKb11VR/eez+9MeEbP1cG+OX3nJGMP9giFp7ujk5x2u2wlxg/dXkEP99qyJYiYuLjucbW2Qk+CLyKKV5KOwzMYuXFrAlpAp7D5T2pYrdJ6bPp4nCOT4hBLiZA0jIgsVSu/JeHW/yFYjCPhSSyiRPG+E9lsU7VOxEbUQpk=
ARC-Message-Signature:i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1746001660; c=relaxed/simple;
	bh=kFZKU6ONUtrGLIClr6nVECDQQILYeKykA6eemyi5vyQ=;
	h=From:To:CC:Subject:Date:Message-ID:MIME-Version:Content-Type; b=qEXpt9uSeiHfwjJZQgaTtMxiHqyjxXi0lZayvZn92aAugElRGGCKDIt7gZj+3NMo5hvv7OBKta1T+9GcLh0Dbt4wXabRtH4sT97NuM7BN4wZO3HWWCHvy4XUAUa56Vrql3az0rcURBIbG4cf7ykCvge1ScCwlgvmLXcbxaprwEc=
ARC-Authentication-Results:i=1; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=mediatek.com; spf=pass smtp.mailfrom=mediatek.com; dkim=pass (1024-bit key) header.d=mediatek.com header.i=@mediatek.com header.b=tg6FzKbr; arc=none smtp.client-ip=210.61.82.184
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=mediatek.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=mediatek.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=mediatek.com header.i=@mediatek.com header.b="tg6FzKbr"
X-UUID: f5d273d8259c11f082f7f7ac98dee637-20250430
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed; d=mediatek.com; s=dk;
	h=Content-Transfer-Encoding:Content-Type:MIME-Version:Message-ID:Date:Subject:CC:To:From; bh=y+k8Kj3BOFWEfZ5M4WOVl8vomqLYm7xgUqE++4WvFgA=;
	b=tg6FzKbrJyDA5YGQM+2F5reLLWllCgXVqQAtV7go2rrFGJ935KsBa5I835xe7C3EjX1cAhpNQL5/miuVXLkhuRPLLk/5lw9A9mLhy7O3tU+6Qq8Jz4NLfEr6xFU4eXzQbTpNqHDypUcW2XeP/2A2GG3GNl/H9NrP0exiotjgXuA=;
X-CID-P-RULE: Release_Ham
X-CID-O-INFO: VERSION:1.2.1,REQID:f08ceb44-0d3b-4bb9-8ccf-e4cd3b04ec86,IP:0,UR
	L:0,TC:0,Content:-25,EDM:0,RT:0,SF:0,FILE:0,BULK:0,RULE:Release_Ham,ACTION
	:release,TS:-25
X-CID-META: VersionHash:0ef645f,CLOUDID:26393607-829c-41bc-b3dd-83387f72f90e,B
	ulkID:nil,BulkQuantity:0,Recheck:0,SF:102,TC:nil,Content:0|50,EDM:-3,IP:ni
	l,URL:1,File:nil,RT:nil,Bulk:nil,QS:nil,BEC:nil,COL:0,OSI:0,OSA:0,AV:0,LES
	:1,SPR:NO,DKR:0,DKP:0,BRR:0,BRE:0,ARC:0
X-CID-BVR: 0
X-CID-BAS: 0,_,0,_
X-CID-FACTOR: TF_CID_SPAM_SNR,TF_CID_SPAM_ULS
X-UUID: f5d273d8259c11f082f7f7ac98dee637-20250430
Received: from mtkmbs14n1.mediatek.inc [(172.21.101.75)] by mailgw02.mediatek.com
	(envelope-from <qun-wei.lin@mediatek.com>)
	(Generic MTA with TLSv1.2 ECDHE-RSA-AES256-GCM-SHA384 256/256)
	with ESMTP id 1543726509; Wed, 30 Apr 2025 16:27:31 +0800
Received: from mtkmbs11n2.mediatek.inc (172.21.101.187) by
 MTKMBS09N2.mediatek.inc (172.21.101.94) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.2.1258.39; Wed, 30 Apr 2025 16:27:30 +0800
Received: from mtksitap99.mediatek.inc (10.233.130.16) by
 mtkmbs11n2.mediatek.inc (172.21.101.73) with Microsoft SMTP Server id
 15.2.1258.39 via Frontend Transport; Wed, 30 Apr 2025 16:27:30 +0800
From: Qun-Wei Lin <qun-wei.lin@mediatek.com>
To: Andrew Morton <akpm@linux-foundation.org>, Mike Rapoport
	<rppt@kernel.org>, Matthias Brugger <matthias.bgg@gmail.com>,
	AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>, Nhat
 Pham <nphamcs@gmail.com>, Sergey Senozhatsky <senozhatsky@chromium.org>,
	Minchan Kim <minchan@kernel.org>
CC: <linux-mm@kvack.org>, <linux-kernel@vger.kernel.org>,
	<linux-arm-kernel@lists.infradead.org>, <linux-mediatek@lists.infradead.org>,
	Casper Li <casper.li@mediatek.com>, Chinwen Chang
	<chinwen.chang@mediatek.com>, Andrew Yang <andrew.yang@mediatek.com>, James
 Hsu <james.hsu@mediatek.com>, Qun-Wei Lin <qun-wei.lin@mediatek.com>, Barry
 Song <21cnbao@gmail.com>
Subject: [PATCH] mm: Add Kcompressd for accelerated memory compression
Date: Wed, 30 Apr 2025 16:26:41 +0800
Message-ID: <20250430082651.3152444-1-qun-wei.lin@mediatek.com>
X-Mailer: git-send-email 2.45.2
Precedence: bulk
X-Mailing-List: linux-kernel@vger.kernel.org
List-Id: <linux-kernel.vger.kernel.org>
List-Subscribe: <mailto:linux-kernel+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-kernel+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: 8bit
X-MTK: N

This patch series introduces a new mechanism called kcompressd to
improve the efficiency of memory reclaiming in the operating system.

Problem:
  In the current system, the kswapd thread is responsible for both scanning
  the LRU pages and handling memory compression tasks (such as those
  involving ZSWAP/ZRAM, if enabled). This combined responsibility can lead
  to significant performance bottlenecks, especially under high memory
  pressure. The kswapd thread becomes a single point of contention, causing
  delays in memory reclaiming and overall system performance degradation.

Solution:
  Introduced kcompressd to handle asynchronous compression during memory
  reclaim, improving efficiency by offloading compression tasks from
  kswapd. This allows kswapd to focus on its primary task of page reclaim
  without being burdened by the additional overhead of compression.

In our handheld devices, we found that applying this mechanism under high
memory pressure scenarios can increase the rate of pgsteal_anon per second
by over 260% compared to the situation with only kswapd. Additionally, we
observed a reduction of over 50% in page allocation stall occurrences,
further demonstrating the effectiveness of kcompressd in alleviating memory
pressure and improving system responsiveness.

Co-developed-by: Barry Song <21cnbao@gmail.com>
Signed-off-by: Barry Song <21cnbao@gmail.com>
Signed-off-by: Qun-Wei Lin <qun-wei.lin@mediatek.com>
Reference: Re: [PATCH 0/2] Improve Zram by separating compression context from kswapd - Barry Song
           https://lore.kernel.org/lkml/20250313093005.13998-1-21cnbao@gmail.com/
---
 include/linux/mmzone.h |  6 ++++
 mm/mm_init.c           |  1 +
 mm/page_io.c           | 71 ++++++++++++++++++++++++++++++++++++++++++
 mm/swap.h              |  6 ++++
 mm/vmscan.c            | 25 +++++++++++++++
 5 files changed, 109 insertions(+)

diff --git a/include/linux/mmzone.h b/include/linux/mmzone.h
index 6ccec1bf2896..93c9195a54ae 100644
--- a/include/linux/mmzone.h
+++ b/include/linux/mmzone.h
@@ -23,6 +23,7 @@
 #include <linux/page-flags.h>
 #include <linux/local_lock.h>
 #include <linux/zswap.h>
+#include <linux/kfifo.h>
 #include <asm/page.h>
 
 /* Free memory management - zoned buddy allocator.  */
@@ -1398,6 +1399,11 @@ typedef struct pglist_data {
 
 	int kswapd_failures;		/* Number of 'reclaimed == 0' runs */
 
+#define KCOMPRESS_FIFO_SIZE 256
+	wait_queue_head_t kcompressd_wait;
+	struct task_struct *kcompressd;
+	struct kfifo kcompress_fifo;
+
 #ifdef CONFIG_COMPACTION
 	int kcompactd_max_order;
 	enum zone_type kcompactd_highest_zoneidx;
diff --git a/mm/mm_init.c b/mm/mm_init.c
index 9659689b8ace..49bae1dd4584 100644
--- a/mm/mm_init.c
+++ b/mm/mm_init.c
@@ -1410,6 +1410,7 @@ static void __meminit pgdat_init_internals(struct pglist_data *pgdat)
 	pgdat_init_kcompactd(pgdat);
 
 	init_waitqueue_head(&pgdat->kswapd_wait);
+	init_waitqueue_head(&pgdat->kcompressd_wait);
 	init_waitqueue_head(&pgdat->pfmemalloc_wait);
 
 	for (i = 0; i < NR_VMSCAN_THROTTLE; i++)
diff --git a/mm/page_io.c b/mm/page_io.c
index 4bce19df557b..d85deb494a6a 100644
--- a/mm/page_io.c
+++ b/mm/page_io.c
@@ -233,6 +233,38 @@ static void swap_zeromap_folio_clear(struct folio *folio)
 	}
 }
 
+static bool swap_sched_async_compress(struct folio *folio)
+{
+	struct swap_info_struct *sis = swp_swap_info(folio->swap);
+	int nid = numa_node_id();
+	pg_data_t *pgdat = NODE_DATA(nid);
+
+	if (unlikely(!pgdat->kcompressd))
+		return false;
+
+	if (!current_is_kswapd())
+		return false;
+
+	if (!folio_test_anon(folio))
+		return false;
+	/*
+	 * This case needs to synchronously return AOP_WRITEPAGE_ACTIVATE
+	 */
+	if (!mem_cgroup_zswap_writeback_enabled(folio_memcg(folio)))
+		return false;
+
+	sis = swp_swap_info(folio->swap);
+	if (zswap_is_enabled() || data_race(sis->flags & SWP_SYNCHRONOUS_IO)) {
+		if (kfifo_avail(&pgdat->kcompress_fifo) >= sizeof(folio) &&
+			kfifo_in(&pgdat->kcompress_fifo, &folio, sizeof(folio))) {
+			wake_up_interruptible(&pgdat->kcompressd_wait);
+			return true;
+		}
+	}
+
+	return false;
+}
+
 /*
  * We may have stale swap cache pages in memory: notice
  * them here and get rid of the unnecessary final write.
@@ -275,6 +307,15 @@ int swap_writepage(struct page *page, struct writeback_control *wbc)
 		 */
 		swap_zeromap_folio_clear(folio);
 	}
+
+	/*
+	 * Compression within zswap and zram might block rmap, unmap
+	 * of both file and anon pages, try to do compression async
+	 * if possible
+	 */
+	if (swap_sched_async_compress(folio))
+		return 0;
+
 	if (zswap_store(folio)) {
 		count_mthp_stat(folio_order(folio), MTHP_STAT_ZSWPOUT);
 		folio_unlock(folio);
@@ -289,6 +330,36 @@ int swap_writepage(struct page *page, struct writeback_control *wbc)
 	return 0;
 }
 
+int kcompressd(void *p)
+{
+	pg_data_t *pgdat = (pg_data_t *)p;
+	struct folio *folio;
+	struct writeback_control wbc = {
+		.sync_mode = WB_SYNC_NONE,
+		.nr_to_write = SWAP_CLUSTER_MAX,
+		.range_start = 0,
+		.range_end = LLONG_MAX,
+		.for_reclaim = 1,
+	};
+
+	while (!kthread_should_stop()) {
+		wait_event_interruptible(pgdat->kcompressd_wait,
+				!kfifo_is_empty(&pgdat->kcompress_fifo));
+
+		while (!kfifo_is_empty(&pgdat->kcompress_fifo)) {
+			if (kfifo_out(&pgdat->kcompress_fifo, &folio, sizeof(folio))) {
+				if (zswap_store(folio)) {
+					count_mthp_stat(folio_order(folio), MTHP_STAT_ZSWPOUT);
+					folio_unlock(folio);
+					continue;
+				}
+				__swap_writepage(folio, &wbc);
+			}
+		}
+	}
+	return 0;
+}
+
 static inline void count_swpout_vm_event(struct folio *folio)
 {
 #ifdef CONFIG_TRANSPARENT_HUGEPAGE
diff --git a/mm/swap.h b/mm/swap.h
index 6f4a3f927edb..3579da413dc2 100644
--- a/mm/swap.h
+++ b/mm/swap.h
@@ -22,6 +22,7 @@ static inline void swap_read_unplug(struct swap_iocb *plug)
 void swap_write_unplug(struct swap_iocb *sio);
 int swap_writepage(struct page *page, struct writeback_control *wbc);
 void __swap_writepage(struct folio *folio, struct writeback_control *wbc);
+int kcompressd(void *p);
 
 /* linux/mm/swap_state.c */
 /* One swap address space for each 64M swap space */
@@ -199,6 +200,11 @@ static inline int swap_zeromap_batch(swp_entry_t entry, int max_nr,
 	return 0;
 }
 
+static inline int kcompressd(void *p)
+{
+	return 0;
+}
+
 #endif /* CONFIG_SWAP */
 
 #endif /* _MM_SWAP_H */
diff --git a/mm/vmscan.c b/mm/vmscan.c
index 3783e45bfc92..2d7b9167bfd6 100644
--- a/mm/vmscan.c
+++ b/mm/vmscan.c
@@ -7420,6 +7420,7 @@ unsigned long shrink_all_memory(unsigned long nr_to_reclaim)
 void __meminit kswapd_run(int nid)
 {
 	pg_data_t *pgdat = NODE_DATA(nid);
+	int ret;
 
 	pgdat_kswapd_lock(pgdat);
 	if (!pgdat->kswapd) {
@@ -7433,7 +7434,26 @@ void __meminit kswapd_run(int nid)
 		} else {
 			wake_up_process(pgdat->kswapd);
 		}
+		ret = kfifo_alloc(&pgdat->kcompress_fifo,
+				KCOMPRESS_FIFO_SIZE * sizeof(struct folio *),
+				GFP_KERNEL);
+		if (ret) {
+			pr_err("%s: fail to kfifo_alloc\n", __func__);
+			goto out;
+		}
+
+		pgdat->kcompressd = kthread_create_on_node(kcompressd, pgdat, nid,
+				"kcompressd%d", nid);
+		if (IS_ERR(pgdat->kcompressd)) {
+			pr_err("Failed to start kcompressd on node %d，ret=%ld\n",
+					nid, PTR_ERR(pgdat->kcompressd));
+			pgdat->kcompressd = NULL;
+			kfifo_free(&pgdat->kcompress_fifo);
+		} else {
+			wake_up_process(pgdat->kcompressd);
+		}
 	}
+out:
 	pgdat_kswapd_unlock(pgdat);
 }
 
@@ -7452,6 +7472,11 @@ void __meminit kswapd_stop(int nid)
 		kthread_stop(kswapd);
 		pgdat->kswapd = NULL;
 	}
+	if (pgdat->kcompressd) {
+		kthread_stop(pgdat->kcompressd);
+		pgdat->kcompressd = NULL;
+		kfifo_free(&pgdat->kcompress_fifo);
+	}
 	pgdat_kswapd_unlock(pgdat);
 }
 
-- 
2.45.2


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from mail-qv1-f48.google.com (mail-qv1-f48.google.com [209.85.219.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 3C9AD1C8FB5
	for <linux-kernel@vger.kernel.org>; Wed, 30 Apr 2025 17:06:11 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=209.85.219.48
ARC-Seal:i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1746032774; cv=none; b=BDqt93QmfGXudlE7aJHwcUGvZPkZwj//9zKFhIEvM+amz/SxO/8IUCdDlp4NTSKXFhwnLcLSyzutrQ2RUyawZJYI4Z5/0a5nwCfYAE3nboIBLcXoEAB4YJykJ39e8sZ3NcEpkW35Kq1FYufh3+XWKHOdXx7tVODnN7BI/3HIwYI=
ARC-Message-Signature:i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1746032774; c=relaxed/simple;
	bh=6AsG6IkV0IYjckIHRMAOQ5aJHwdb2EjdAcelFfINyQ8=;
	h=MIME-Version:References:In-Reply-To:From:Date:Message-ID:Subject:
	 To:Cc:Content-Type; b=C+LVbdHgEVFsCHn66I3P1p2oHWCGxHPcrobhZ9talNofIgKj4fg1u8VdRnZJ7kP/nDxrLGV38X5awX0p5IrSOJL/sdXMvzPoS2oiqTKxJCUTdaagx1vIFR4Hj6buZU/GJl/ugEPJ72CWBC0n2eGea8zbxuf15prXECB6N2OZERo=
ARC-Authentication-Results:i=1; smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=gmail.com; spf=pass smtp.mailfrom=gmail.com; dkim=pass (2048-bit key) header.d=gmail.com header.i=@gmail.com header.b=ZXNzYtky; arc=none smtp.client-ip=209.85.219.48
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=gmail.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=gmail.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=gmail.com header.i=@gmail.com header.b="ZXNzYtky"
Received: by mail-qv1-f48.google.com with SMTP id 6a1803df08f44-6e8fce04655so1433346d6.3
        for <linux-kernel@vger.kernel.org>; Wed, 30 Apr 2025 10:06:11 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20230601; t=1746032771; x=1746637571; darn=vger.kernel.org;
        h=content-transfer-encoding:cc:to:subject:message-id:date:from
         :in-reply-to:references:mime-version:from:to:cc:subject:date
         :message-id:reply-to;
        bh=QJHez8HNwZpEakJ3GJ7Qf+N0NueKUDTHXJladqEDSg4=;
        b=ZXNzYtky+qJMy/c/0HlGHj8F2N0OdxZDjgtZyZooLsP//S90GFASRLyHBPjLHNcAW2
         hCaPjOgFeUHTGF9fzBoDAunslgmKf0C2xuh7WE1rfk4wiX27MGJkXGGhPn3eOsd5RqCo
         YsGrixCNjPJ4cXlIwS3T6rQiP7SOnf2uZJzRktOg+5abZaFI5j82/xKEZNINtGEJjX8F
         KGvDJ91sMkeVynTkq0oMP9zogJfRdk25cLCcIL9hR7qN+wCcTUkNt1sAsF/XP+KdCPDX
         Ab27Zswmh2HVLHFbU3IR48uFygRatx3yKeHXatfwQig4FbynowMS/iW1P3pYeLXiLxse
         0tdw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20230601; t=1746032771; x=1746637571;
        h=content-transfer-encoding:cc:to:subject:message-id:date:from
         :in-reply-to:references:mime-version:x-gm-message-state:from:to:cc
         :subject:date:message-id:reply-to;
        bh=QJHez8HNwZpEakJ3GJ7Qf+N0NueKUDTHXJladqEDSg4=;
        b=tDZWTdVeSVMG/FwRhA5YkS1z2Q5qwKIXryJAFkS8IObblKNBYVMQulstcIy1sz90Jx
         dFR8rbpfIxWtfAmCsX7e6LLU+P67FbERKknoe2bEyWf200khtzlPY4u600NREV9l028i
         CXNfgC/pTrUC/lHf+K9XHBD0w0Q5MYPkHHwse/s1ezAlFOAZRt3YIV+XAdMq2p2fb8hI
         uVIA1fD3fPX00jNYqw47valh/gqkux4epQKzNlrfoy8UvoIJMs3pSBM08Ukx2iN7gYZO
         qCkPGlPBVsrmFdGyHMcmB3o4wI82ll4hRIJYrSRyQ7ajqog9HqMZxh8urCom+d9Mless
         MMGw==
X-Forwarded-Encrypted: i=1; AJvYcCXSJmy8S50Io+QIhP2JK5r4AR5Yj0SNdTBSmWBSRwZK4E+FLZ2oZ58o+ttC3vIik4Fm4UsLPoWg8eJMrUs=@vger.kernel.org
X-Gm-Message-State: AOJu0Yw0aSk305jAxomqi15i3X/lgnUzZ+1CTCVSLlirpMRPlr80SEds
	605ozjrBVWEmQTMJtThAvXJLklhOORLuXbMoWEs6V7xHZSVroaKfHG0oHov2CAYsZ4feXB20E/Q
	BHeKAEmZZURgSe/YQmAAE4ThMxAo=
X-Gm-Gg: ASbGncsjN99JLt4Dd+KJKXSligjfB4SmHv6cd2TOkqyU+2imQVU1PaPsfTJ5t4chvCO
	QoSubENDGhrOgLP4wRvofPi84rSzIIbeGy2pz6gwDCFeNAg2a5h7/4qr8Lhp7Ui1HFJ5pg5Jmls
	jOoriLAXgesJ1kT9AioGEf7hspCXwHVjCdiQ==
X-Google-Smtp-Source: AGHT+IG0E4wID2HPpTmHxUm2md1g3OULl4QwRgKw/Yz/dJz8ojI3h6U7Tg4mhPuA4opVEeJPKJ9IXACDI4cYf214WjM=
X-Received: by 2002:a05:6214:1bc7:b0:6e6:591b:fa62 with SMTP id
 6a1803df08f44-6f4fce40dc6mr67144826d6.5.1746032770591; Wed, 30 Apr 2025
 10:06:10 -0700 (PDT)
Precedence: bulk
X-Mailing-List: linux-kernel@vger.kernel.org
List-Id: <linux-kernel.vger.kernel.org>
List-Subscribe: <mailto:linux-kernel+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-kernel+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
References: <20250430082651.3152444-1-qun-wei.lin@mediatek.com>
In-Reply-To: <20250430082651.3152444-1-qun-wei.lin@mediatek.com>
From: Nhat Pham <nphamcs@gmail.com>
Date: Wed, 30 Apr 2025 10:05:59 -0700
X-Gm-Features: ATxdqUHgRrr3TynCPFETJ0RePkjNkdgQExomlSQnpz_nUQy5C6ldMmhK-GnUrFU
Message-ID: <CAKEwX=P3GmtqjyNWYTHYT=NLSP44qFRXWiq+R5T+NzPkMvVhsw@mail.gmail.com>
Subject: Re: [PATCH] mm: Add Kcompressd for accelerated memory compression
To: Qun-Wei Lin <qun-wei.lin@mediatek.com>
Cc: Andrew Morton <akpm@linux-foundation.org>, Mike Rapoport <rppt@kernel.org>, 
	Matthias Brugger <matthias.bgg@gmail.com>, 
	AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>, 
	Sergey Senozhatsky <senozhatsky@chromium.org>, Minchan Kim <minchan@kernel.org>, linux-mm@kvack.org, 
	linux-kernel@vger.kernel.org, linux-arm-kernel@lists.infradead.org, 
	linux-mediatek@lists.infradead.org, Casper Li <casper.li@mediatek.com>, 
	Chinwen Chang <chinwen.chang@mediatek.com>, Andrew Yang <andrew.yang@mediatek.com>, 
	James Hsu <james.hsu@mediatek.com>, Barry Song <21cnbao@gmail.com>, 
	Joshua Hahn <joshua.hahnjy@gmail.com>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

On Wed, Apr 30, 2025 at 1:27=E2=80=AFAM Qun-Wei Lin <qun-wei.lin@mediatek.c=
om> wrote:
>
> This patch series introduces a new mechanism called kcompressd to
> improve the efficiency of memory reclaiming in the operating system.
>
> Problem:
>   In the current system, the kswapd thread is responsible for both scanni=
ng
>   the LRU pages and handling memory compression tasks (such as those
>   involving ZSWAP/ZRAM, if enabled). This combined responsibility can lea=
d
>   to significant performance bottlenecks, especially under high memory
>   pressure. The kswapd thread becomes a single point of contention, causi=
ng
>   delays in memory reclaiming and overall system performance degradation.
>
> Solution:
>   Introduced kcompressd to handle asynchronous compression during memory
>   reclaim, improving efficiency by offloading compression tasks from
>   kswapd. This allows kswapd to focus on its primary task of page reclaim
>   without being burdened by the additional overhead of compression.
>
> In our handheld devices, we found that applying this mechanism under high
> memory pressure scenarios can increase the rate of pgsteal_anon per secon=
d
> by over 260% compared to the situation with only kswapd. Additionally, we
> observed a reduction of over 50% in page allocation stall occurrences,
> further demonstrating the effectiveness of kcompressd in alleviating memo=
ry
> pressure and improving system responsiveness.
>
> Co-developed-by: Barry Song <21cnbao@gmail.com>
> Signed-off-by: Barry Song <21cnbao@gmail.com>
> Signed-off-by: Qun-Wei Lin <qun-wei.lin@mediatek.com>
> Reference: Re: [PATCH 0/2] Improve Zram by separating compression context=
 from kswapd - Barry Song
>            https://lore.kernel.org/lkml/20250313093005.13998-1-21cnbao@gm=
ail.com/
> ---
>  include/linux/mmzone.h |  6 ++++
>  mm/mm_init.c           |  1 +
>  mm/page_io.c           | 71 ++++++++++++++++++++++++++++++++++++++++++
>  mm/swap.h              |  6 ++++
>  mm/vmscan.c            | 25 +++++++++++++++
>  5 files changed, 109 insertions(+)
>
> diff --git a/include/linux/mmzone.h b/include/linux/mmzone.h
> index 6ccec1bf2896..93c9195a54ae 100644
> --- a/include/linux/mmzone.h
> +++ b/include/linux/mmzone.h
> @@ -23,6 +23,7 @@
>  #include <linux/page-flags.h>
>  #include <linux/local_lock.h>
>  #include <linux/zswap.h>
> +#include <linux/kfifo.h>
>  #include <asm/page.h>
>
>  /* Free memory management - zoned buddy allocator.  */
> @@ -1398,6 +1399,11 @@ typedef struct pglist_data {
>
>         int kswapd_failures;            /* Number of 'reclaimed =3D=3D 0'=
 runs */
>
> +#define KCOMPRESS_FIFO_SIZE 256
> +       wait_queue_head_t kcompressd_wait;
> +       struct task_struct *kcompressd;
> +       struct kfifo kcompress_fifo;
> +
>  #ifdef CONFIG_COMPACTION
>         int kcompactd_max_order;
>         enum zone_type kcompactd_highest_zoneidx;
> diff --git a/mm/mm_init.c b/mm/mm_init.c
> index 9659689b8ace..49bae1dd4584 100644
> --- a/mm/mm_init.c
> +++ b/mm/mm_init.c
> @@ -1410,6 +1410,7 @@ static void __meminit pgdat_init_internals(struct p=
glist_data *pgdat)
>         pgdat_init_kcompactd(pgdat);
>
>         init_waitqueue_head(&pgdat->kswapd_wait);
> +       init_waitqueue_head(&pgdat->kcompressd_wait);
>         init_waitqueue_head(&pgdat->pfmemalloc_wait);
>
>         for (i =3D 0; i < NR_VMSCAN_THROTTLE; i++)
> diff --git a/mm/page_io.c b/mm/page_io.c
> index 4bce19df557b..d85deb494a6a 100644
> --- a/mm/page_io.c
> +++ b/mm/page_io.c
> @@ -233,6 +233,38 @@ static void swap_zeromap_folio_clear(struct folio *f=
olio)
>         }
>  }
>
> +static bool swap_sched_async_compress(struct folio *folio)
> +{
> +       struct swap_info_struct *sis =3D swp_swap_info(folio->swap);
> +       int nid =3D numa_node_id();
> +       pg_data_t *pgdat =3D NODE_DATA(nid);
> +
> +       if (unlikely(!pgdat->kcompressd))
> +               return false;
> +
> +       if (!current_is_kswapd())
> +               return false;
> +
> +       if (!folio_test_anon(folio))
> +               return false;
> +       /*
> +        * This case needs to synchronously return AOP_WRITEPAGE_ACTIVATE
> +        */
> +       if (!mem_cgroup_zswap_writeback_enabled(folio_memcg(folio)))
> +               return false;

Ah, this is unfortunate.

At this point, we do not know whether the page is compressible yet. If
we decide to perform async compression here, and the page is
incompressible, and we disable zswap writeback, we risk not being able
to activate it down the line, making it more likely that we try it
again too soon :(

Hopefully we can remove this limitation, when Joshua's work to store
incompressible pages in the zswap LRU lands. Then, even if the page is
incompressible, we won't retry it and just put it in the zswap LRU...

> +
> +       sis =3D swp_swap_info(folio->swap);

There's a slight hitch here. Upstream-wise, zswap differs slightly
from zram: it is cgroup-controlled. zswap can be disabled on a
per-cgroup basis. This is useful, for e.g, when we know for certain
that a workload's data are not compressible, and/or they are not
latency-sensitive so might as well use disk swap.

If the folio's cgroup has its zswap limit reached/disables zswap, then
we should fallback to disk swapping right away, instead of holding the
page. I think we should check it here. Maybe add a
mem_cgroup_may_zswap() helper (see obj_cgroup_may_zswap() for
implementation details - should be a simple-ish refactor), and check
here, in addition to zswap_is_enabled() check? Something like:

if ((zswap_is_enabled() && mem_cgroup_may_zswap(folio_memcg(folio)))
|| data_race(sis->flags & SWP_SYNCHRONOUS_IO))

Does that sound reasonable, Qun-Wei and Barry?

> +       if (zswap_is_enabled() || data_race(sis->flags & SWP_SYNCHRONOUS_=
IO)) {
> +               if (kfifo_avail(&pgdat->kcompress_fifo) >=3D sizeof(folio=
) &&
> +                       kfifo_in(&pgdat->kcompress_fifo, &folio, sizeof(f=
olio))) {
> +                       wake_up_interruptible(&pgdat->kcompressd_wait);
> +                       return true;
> +               }
> +       }
> +
> +       return false;
> +}
> +
>  /*
>   * We may have stale swap cache pages in memory: notice
>   * them here and get rid of the unnecessary final write.
> @@ -275,6 +307,15 @@ int swap_writepage(struct page *page, struct writeba=
ck_control *wbc)
>                  */
>                 swap_zeromap_folio_clear(folio);
>         }
> +
> +       /*
> +        * Compression within zswap and zram might block rmap, unmap
> +        * of both file and anon pages, try to do compression async
> +        * if possible
> +        */
> +       if (swap_sched_async_compress(folio))
> +               return 0;
> +
>         if (zswap_store(folio)) {
>                 count_mthp_stat(folio_order(folio), MTHP_STAT_ZSWPOUT);
>                 folio_unlock(folio);
> @@ -289,6 +330,36 @@ int swap_writepage(struct page *page, struct writeba=
ck_control *wbc)
>         return 0;
>  }
>
> +int kcompressd(void *p)
> +{
> +       pg_data_t *pgdat =3D (pg_data_t *)p;
> +       struct folio *folio;
> +       struct writeback_control wbc =3D {
> +               .sync_mode =3D WB_SYNC_NONE,
> +               .nr_to_write =3D SWAP_CLUSTER_MAX,
> +               .range_start =3D 0,
> +               .range_end =3D LLONG_MAX,
> +               .for_reclaim =3D 1,
> +       };
> +
> +       while (!kthread_should_stop()) {
> +               wait_event_interruptible(pgdat->kcompressd_wait,
> +                               !kfifo_is_empty(&pgdat->kcompress_fifo));
> +
> +               while (!kfifo_is_empty(&pgdat->kcompress_fifo)) {
> +                       if (kfifo_out(&pgdat->kcompress_fifo, &folio, siz=
eof(folio))) {
> +                               if (zswap_store(folio)) {
> +                                       count_mthp_stat(folio_order(folio=
), MTHP_STAT_ZSWPOUT);
> +                                       folio_unlock(folio);
> +                                       continue;
> +                               }
> +                               __swap_writepage(folio, &wbc);
> +                       }
> +               }
> +       }
> +       return 0;
> +}
> +
>  static inline void count_swpout_vm_event(struct folio *folio)
>  {
>  #ifdef CONFIG_TRANSPARENT_HUGEPAGE
> diff --git a/mm/swap.h b/mm/swap.h
> index 6f4a3f927edb..3579da413dc2 100644
> --- a/mm/swap.h
> +++ b/mm/swap.h
> @@ -22,6 +22,7 @@ static inline void swap_read_unplug(struct swap_iocb *p=
lug)
>  void swap_write_unplug(struct swap_iocb *sio);
>  int swap_writepage(struct page *page, struct writeback_control *wbc);
>  void __swap_writepage(struct folio *folio, struct writeback_control *wbc=
);
> +int kcompressd(void *p);
>
>  /* linux/mm/swap_state.c */
>  /* One swap address space for each 64M swap space */
> @@ -199,6 +200,11 @@ static inline int swap_zeromap_batch(swp_entry_t ent=
ry, int max_nr,
>         return 0;
>  }
>
> +static inline int kcompressd(void *p)
> +{
> +       return 0;
> +}
> +
>  #endif /* CONFIG_SWAP */
>
>  #endif /* _MM_SWAP_H */
> diff --git a/mm/vmscan.c b/mm/vmscan.c
> index 3783e45bfc92..2d7b9167bfd6 100644
> --- a/mm/vmscan.c
> +++ b/mm/vmscan.c
> @@ -7420,6 +7420,7 @@ unsigned long shrink_all_memory(unsigned long nr_to=
_reclaim)
>  void __meminit kswapd_run(int nid)
>  {
>         pg_data_t *pgdat =3D NODE_DATA(nid);
> +       int ret;
>
>         pgdat_kswapd_lock(pgdat);
>         if (!pgdat->kswapd) {
> @@ -7433,7 +7434,26 @@ void __meminit kswapd_run(int nid)
>                 } else {
>                         wake_up_process(pgdat->kswapd);
>                 }
> +               ret =3D kfifo_alloc(&pgdat->kcompress_fifo,
> +                               KCOMPRESS_FIFO_SIZE * sizeof(struct folio=
 *),
> +                               GFP_KERNEL);
> +               if (ret) {
> +                       pr_err("%s: fail to kfifo_alloc\n", __func__);
> +                       goto out;
> +               }
> +
> +               pgdat->kcompressd =3D kthread_create_on_node(kcompressd, =
pgdat, nid,
> +                               "kcompressd%d", nid);
> +               if (IS_ERR(pgdat->kcompressd)) {
> +                       pr_err("Failed to start kcompressd on node %d=EF=
=BC=8Cret=3D%ld\n",
> +                                       nid, PTR_ERR(pgdat->kcompressd));
> +                       pgdat->kcompressd =3D NULL;
> +                       kfifo_free(&pgdat->kcompress_fifo);
> +               } else {
> +                       wake_up_process(pgdat->kcompressd);
> +               }
>         }
> +out:
>         pgdat_kswapd_unlock(pgdat);
>  }
>
> @@ -7452,6 +7472,11 @@ void __meminit kswapd_stop(int nid)
>                 kthread_stop(kswapd);
>                 pgdat->kswapd =3D NULL;
>         }
> +       if (pgdat->kcompressd) {
> +               kthread_stop(pgdat->kcompressd);
> +               pgdat->kcompressd =3D NULL;
> +               kfifo_free(&pgdat->kcompress_fifo);
> +       }
>         pgdat_kswapd_unlock(pgdat);
>  }
>
> --
> 2.45.2
>

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from mail-qv1-f43.google.com (mail-qv1-f43.google.com [209.85.219.43])
	(using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 741AC25D534
	for <linux-kernel@vger.kernel.org>; Wed, 30 Apr 2025 17:22:39 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=209.85.219.43
ARC-Seal:i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1746033761; cv=none; b=u9IxA+46eZ8gVhleQPGmoI+/Gv3cYr49VDHyxgwq/SaJ32ozvhfw+595o2IeCALY6bElFXS8x2gj7sGaHhG7aykocWuKq8PGp+w1Wo6Wd+WK/Hynz6xV4y5aH1lN8CjGKwwgO1Uny3M9IknMHEU5/1Guvew4rKdgPxoJPqhtdSs=
ARC-Message-Signature:i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1746033761; c=relaxed/simple;
	bh=CH4napBsCBC0WBNNu69lyH6W2wkeBWtP8Vh2WDJOLuQ=;
	h=MIME-Version:References:In-Reply-To:From:Date:Message-ID:Subject:
	 To:Cc:Content-Type; b=HTIiD+r+2CCnrTXRlemRFbQ1+Q7GQlgSn/dhKhP6GO1dKHFnc60p6AJD1nUBZwq6ukzf9Uc/Y73ER+eJ1gD9Mzc1DRZabPpFvdDduISA96wWmJnGyQN/VUv1sa5XZeEDG8ZaOdlV7qljexIlIdlM+KjY0GfWjmMPvEPKxUFw8TQ=
ARC-Authentication-Results:i=1; smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=gmail.com; spf=pass smtp.mailfrom=gmail.com; dkim=pass (2048-bit key) header.d=gmail.com header.i=@gmail.com header.b=Z7p5gLzu; arc=none smtp.client-ip=209.85.219.43
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=gmail.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=gmail.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=gmail.com header.i=@gmail.com header.b="Z7p5gLzu"
Received: by mail-qv1-f43.google.com with SMTP id 6a1803df08f44-6e900a7ce55so2009916d6.3
        for <linux-kernel@vger.kernel.org>; Wed, 30 Apr 2025 10:22:39 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20230601; t=1746033758; x=1746638558; darn=vger.kernel.org;
        h=content-transfer-encoding:cc:to:subject:message-id:date:from
         :in-reply-to:references:mime-version:from:to:cc:subject:date
         :message-id:reply-to;
        bh=CH4napBsCBC0WBNNu69lyH6W2wkeBWtP8Vh2WDJOLuQ=;
        b=Z7p5gLzu00uAAMW6THlo7nFcH73ZpoXEKksrJ7jn3UHkvnc/mkITMA4Te29WerYAI3
         aIzHirknmMB73TF9i+MeIAOwlud6DhJytlV0/1DqBoFbX00kD6D06eTx4HMuiXCeql9X
         g7a3HiGpL3pnnAGvkxpFgrbALkDom0tPB5w3iw3ZFuITIJBcHAVGOHRpueBiOMnoGjgJ
         G0OKaJNaEuT8YOVE8P4IX4K+/VnGQdO5TTIKIB/m/I5eUHXJJis0xGbUk7bSXEsZCIIN
         Q99dxkcnSBJxq4M2XK7tf9hE0vLJpLKm+CuLesljnUWLM9aMXq1clTAqtis6vWTKmj+i
         MdOw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20230601; t=1746033758; x=1746638558;
        h=content-transfer-encoding:cc:to:subject:message-id:date:from
         :in-reply-to:references:mime-version:x-gm-message-state:from:to:cc
         :subject:date:message-id:reply-to;
        bh=CH4napBsCBC0WBNNu69lyH6W2wkeBWtP8Vh2WDJOLuQ=;
        b=NXzfJyfexxFuB//P4KQy24LFZx19m8pTXwZMlzrthaBqoGdKIRaBcri6WxVu971s2W
         E6EICWCZPvtB/3WHOHL7AHoCBGEAJ9umvUF2Vd4vmyT+Mq6wnxMOUF1uGlLTTcKFpAyj
         /6YppuayosWK61FN+MHXgZzGknGT50W6A357UlyWbrUyRnCedcI96jyhsBQqvdBHWrlv
         KJHdJy3usXYT7Oril9+2lEqYIBKE880L0UjBZM/MDChM/9P6i2AQbT7i5WO4YZL7G3Id
         yrsJxwdhQ8QSdtggFqDolRvPZ7IBvClII+9mKqswkHicmzZMsNW8uy1feYnulMcAwcFr
         +qNw==
X-Forwarded-Encrypted: i=1; AJvYcCVBPv4IOr9fm6TNt2F/mK7YAV6x1R6rhFWGOlb4VtqT64GBVe0unHGe4r2bvMMbvo5hJ5DFffRrYizfSwo=@vger.kernel.org
X-Gm-Message-State: AOJu0YwPO05xlNavj4j4mivHjt0qDhqfKaIMRMmmfUsGDMmPrXEKW82G
	F2Jynp2uC8tS/89TkXsKemiyhSaidLoskIqOvoJHoj8q/k/dkrmv7cvOk3nSnKavu/cbbNhTng4
	WxxPnx82yItb+OCFXNv8oaiDB3iA=
X-Gm-Gg: ASbGncuL2QGfV6aM5vsM6H4ER/GYuH76cC8B3Is3DvyjEvc97n+RSh85Pb5J71gtn0K
	evs090Ree+o3jaMpSzTaqhuM7InNgV/ucgjymZwcv5qUSmx5rsUAxASUZm3Xb2pg9fpBUqFP62A
	akcZ+ihLVw/BKWz8neTjXn6xo=
X-Google-Smtp-Source: AGHT+IF0hkSUkBscoztwrJiCPtGe/eqecg5IeOVFYTEiAr9H2ndJDheoCXzUScHPG2WNdnXZOmnD+9FyO9Oh9/9V6Q4=
X-Received: by 2002:a05:6214:d8d:b0:6e8:ddf6:d11e with SMTP id
 6a1803df08f44-6f509135fd5mr1962686d6.21.1746033758098; Wed, 30 Apr 2025
 10:22:38 -0700 (PDT)
Precedence: bulk
X-Mailing-List: linux-kernel@vger.kernel.org
List-Id: <linux-kernel.vger.kernel.org>
List-Subscribe: <mailto:linux-kernel+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-kernel+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
References: <20250430082651.3152444-1-qun-wei.lin@mediatek.com>
In-Reply-To: <20250430082651.3152444-1-qun-wei.lin@mediatek.com>
From: Nhat Pham <nphamcs@gmail.com>
Date: Wed, 30 Apr 2025 10:22:27 -0700
X-Gm-Features: ATxdqUEz8NUpZ41yOc0wEWBdYrRigHz3dBQhIEdEZTRmRa2kkuklIIa5A4uoDWA
Message-ID: <CAKEwX=P192ijuK+O6r5ocwZsbtiV=-gVc1tz-=dtQ1NCw65gUA@mail.gmail.com>
Subject: Re: [PATCH] mm: Add Kcompressd for accelerated memory compression
To: Qun-Wei Lin <qun-wei.lin@mediatek.com>
Cc: Andrew Morton <akpm@linux-foundation.org>, Mike Rapoport <rppt@kernel.org>, 
	Matthias Brugger <matthias.bgg@gmail.com>, 
	AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>, 
	Sergey Senozhatsky <senozhatsky@chromium.org>, Minchan Kim <minchan@kernel.org>, linux-mm@kvack.org, 
	linux-kernel@vger.kernel.org, linux-arm-kernel@lists.infradead.org, 
	linux-mediatek@lists.infradead.org, Casper Li <casper.li@mediatek.com>, 
	Chinwen Chang <chinwen.chang@mediatek.com>, Andrew Yang <andrew.yang@mediatek.com>, 
	James Hsu <james.hsu@mediatek.com>, Barry Song <21cnbao@gmail.com>, 
	Yosry Ahmed <yosry.ahmed@linux.dev>, Johannes Weiner <hannes@cmpxchg.org>, 
	Kairui Song <ryncsn@gmail.com>, Shakeel Butt <shakeel.butt@linux.dev>, 
	Joshua Hahn <joshua.hahnjy@gmail.com>, Chengming Zhou <chengming.zhou@linux.dev>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

On Wed, Apr 30, 2025 at 1:27=E2=80=AFAM Qun-Wei Lin <qun-wei.lin@mediatek.c=
om> wrote:
>

cc-ing a couple more folks who are interested/working on this area
(Kairui, Shakeel, Johannes, Yosry, Chengming, etc.).

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from smtp.kernel.org (aws-us-west-2-korg-mail-1.web.codeaurora.org [10.30.226.201])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 5A74A145A03
	for <linux-kernel@vger.kernel.org>; Wed, 30 Apr 2025 21:51:07 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=10.30.226.201
ARC-Seal:i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1746049868; cv=none; b=t78/hSpWvmsaEcw+SBTcIwsHZu35ws9qSpfIf/UvCiDiAgUuvAhg0m5KcC54azq54h5KLL3HAB+ljPKyp2Xu2HVhtRFzx7wwHvOox5YLzNN9CTt8Ac/HohsqQ2mHIG97U7eC6SiPawGxYMtxQmE4TWQ04NrgkQbme2+gcf5iYw4=
ARC-Message-Signature:i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1746049868; c=relaxed/simple;
	bh=5u/M4235ZhIaoydVPyaBH4cYCvqZf2avpMDKQWTlaWo=;
	h=Date:From:To:Cc:Subject:Message-Id:In-Reply-To:References:
	 Mime-Version:Content-Type; b=HVOmA6tmmxz4ZyMsfqlsOEik0mEE5+lPpprXL8YKY8VTdWorGdMf0SiPVx6rrci88QceMd7D6zbdotJP36Fq/FQ/XXy+tsOcJPoGIlVWi6vDAYcVnipcocSo76As8k5wMe4bnIAyhND/NGql08YzIvoOC4oFUzpj14koKl8buPA=
ARC-Authentication-Results:i=1; smtp.subspace.kernel.org; dkim=pass (1024-bit key) header.d=linux-foundation.org header.i=@linux-foundation.org header.b=RndfgxAr; arc=none smtp.client-ip=10.30.226.201
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=linux-foundation.org header.i=@linux-foundation.org header.b="RndfgxAr"
Received: by smtp.kernel.org (Postfix) with ESMTPSA id 07C5EC4CEE7;
	Wed, 30 Apr 2025 21:51:06 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=linux-foundation.org;
	s=korg; t=1746049867;
	bh=5u/M4235ZhIaoydVPyaBH4cYCvqZf2avpMDKQWTlaWo=;
	h=Date:From:To:Cc:Subject:In-Reply-To:References:From;
	b=RndfgxAr+7rzrSzhRqUo3Hdh8cOk1RR+5tdnl4wEyYYGeBTuUq2adD0CtwrTvKC8+
	 dCPYZldY4E2o0iBRPOHrpSYjq8fGDoceEbNX1cS2VvMPrZM1ARHA6ddt6i14worw86
	 Ftug5mszCLdfxUuQBPRg3hOiMYU/LpCr0zRhkqrk=
Date: Wed, 30 Apr 2025 14:51:06 -0700
From: Andrew Morton <akpm@linux-foundation.org>
To: Qun-Wei Lin <qun-wei.lin@mediatek.com>
Cc: Mike Rapoport <rppt@kernel.org>, Matthias Brugger
 <matthias.bgg@gmail.com>, AngeloGioacchino Del Regno
 <angelogioacchino.delregno@collabora.com>, Nhat Pham <nphamcs@gmail.com>,
 Sergey Senozhatsky <senozhatsky@chromium.org>, Minchan Kim
 <minchan@kernel.org>, <linux-mm@kvack.org>, <linux-kernel@vger.kernel.org>,
 <linux-arm-kernel@lists.infradead.org>,
 <linux-mediatek@lists.infradead.org>, Casper Li <casper.li@mediatek.com>,
 Chinwen Chang <chinwen.chang@mediatek.com>, Andrew Yang
 <andrew.yang@mediatek.com>, James Hsu <james.hsu@mediatek.com>, Barry Song
 <21cnbao@gmail.com>
Subject: Re: [PATCH] mm: Add Kcompressd for accelerated memory compression
Message-Id: <20250430145106.8ce79a05d35cec72aa02baa6@linux-foundation.org>
In-Reply-To: <20250430082651.3152444-1-qun-wei.lin@mediatek.com>
References: <20250430082651.3152444-1-qun-wei.lin@mediatek.com>
X-Mailer: Sylpheed 3.7.0 (GTK+ 2.24.33; x86_64-pc-linux-gnu)
Precedence: bulk
X-Mailing-List: linux-kernel@vger.kernel.org
List-Id: <linux-kernel.vger.kernel.org>
List-Subscribe: <mailto:linux-kernel+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-kernel+unsubscribe@vger.kernel.org>
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit

On Wed, 30 Apr 2025 16:26:41 +0800 Qun-Wei Lin <qun-wei.lin@mediatek.com> wrote:

> This patch series introduces a new mechanism called kcompressd to
> improve the efficiency of memory reclaiming in the operating system.
> 
> Problem:
>   In the current system, the kswapd thread is responsible for both scanning
>   the LRU pages and handling memory compression tasks (such as those
>   involving ZSWAP/ZRAM, if enabled). This combined responsibility can lead
>   to significant performance bottlenecks, especially under high memory
>   pressure. The kswapd thread becomes a single point of contention, causing
>   delays in memory reclaiming and overall system performance degradation.
> 
> Solution:
>   Introduced kcompressd to handle asynchronous compression during memory
>   reclaim, improving efficiency by offloading compression tasks from
>   kswapd. This allows kswapd to focus on its primary task of page reclaim
>   without being burdened by the additional overhead of compression.
> 
> In our handheld devices, we found that applying this mechanism under high
> memory pressure scenarios can increase the rate of pgsteal_anon per second
> by over 260% compared to the situation with only kswapd. Additionally, we
> observed a reduction of over 50% in page allocation stall occurrences,
> further demonstrating the effectiveness of kcompressd in alleviating memory
> pressure and improving system responsiveness.

It's a significant change and I'm thinking that broader performance
testing across a broader range of machines is needed before we can
confidently upstream such a change.

Also, it's presumably a small net loss on single-CPU machines (do these
exist any more?).  Is it hard to disable this feature on such machines?

>  
> +static bool swap_sched_async_compress(struct folio *folio)
> +{
> +	struct swap_info_struct *sis = swp_swap_info(folio->swap);
> +	int nid = numa_node_id();
> +	pg_data_t *pgdat = NODE_DATA(nid);
> +
> +	if (unlikely(!pgdat->kcompressd))
> +		return false;
> +
> +	if (!current_is_kswapd())
> +		return false;
> +
> +	if (!folio_test_anon(folio))
> +		return false;

Are you sure the above three tests are really needed?



From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from mail-vs1-f50.google.com (mail-vs1-f50.google.com [209.85.217.50])
	(using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 85A63126C05
	for <linux-kernel@vger.kernel.org>; Wed, 30 Apr 2025 22:50:02 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=209.85.217.50
ARC-Seal:i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1746053404; cv=none; b=NRGFPsvSk5Y8rwaK7KLd1nvxEPGPFpJb2XniXy+FphSsrPFiBcRSVsuik4dlCQ7Ds/X2LzfZv/ifQ/Fv6YkGMJHJSgwDnejkHOb73WoglNn147t9x2TFNTZPT/wfXRKdSQjQyAuOojKAajGbaBH3VrKMAtd0QqTX3sTJsGKkHwc=
ARC-Message-Signature:i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1746053404; c=relaxed/simple;
	bh=9MGMOeD6EkUGwyYOX99XuRPkhol/Rk4nwiKNSB8UfBw=;
	h=MIME-Version:References:In-Reply-To:From:Date:Message-ID:Subject:
	 To:Cc:Content-Type; b=GcKRSA9XCD5gVh1yP8rmiRIbq/iamDxpA5M9PAAiYQqeOXp9t7Kdr81JGyWP++bsuov8TlCvvIq3NnlkN8G669tEg3nnCuMrSRH2018J8q/KG2LIRMHu0VUlK0M1koaLwWuANEhwyig3XbLBXqUeZpxZOy2g4uMGmw7Z2fXa5/I=
ARC-Authentication-Results:i=1; smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=gmail.com; spf=pass smtp.mailfrom=gmail.com; dkim=pass (2048-bit key) header.d=gmail.com header.i=@gmail.com header.b=HLkgAuGQ; arc=none smtp.client-ip=209.85.217.50
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=gmail.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=gmail.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=gmail.com header.i=@gmail.com header.b="HLkgAuGQ"
Received: by mail-vs1-f50.google.com with SMTP id ada2fe7eead31-4dad6cc2be0so122727137.1
        for <linux-kernel@vger.kernel.org>; Wed, 30 Apr 2025 15:50:02 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20230601; t=1746053401; x=1746658201; darn=vger.kernel.org;
        h=content-transfer-encoding:cc:to:subject:message-id:date:from
         :in-reply-to:references:mime-version:from:to:cc:subject:date
         :message-id:reply-to;
        bh=nbpbINSrxfUumV9lwyjlqLA8g7akUpbSjiCjBJP9b4Q=;
        b=HLkgAuGQopxQuG4nVPS+1gEvY5p08oNWFwm7TWRJ/4SXcj1AFki/ga6rE9jLJ3NjSZ
         ucDSpFg3dg3jC+0jbKJr3tUnAjmLOdEfq8YlKB05XzvVY/itNVqCfzUy/UnhEx7yFMPn
         8rw8ezmUvMAFj1CIH94T5lfmluayeELlYrWeOlyvsYK+X+XfRsa35lVWJQnepc+DffqP
         sw5CyQXtGCGvsgcls1+8EsrbGFDdogGEikvaYYRcdN6CX2uIRrKfnh2ZIk8ALd1CNR4Z
         KbUGR6dF94ZkEXO53P/e30viGdZ+SI8l9Xbv7jcgpzosU+Vh880fnvG+rdWtqzNCEcwZ
         eMjQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20230601; t=1746053401; x=1746658201;
        h=content-transfer-encoding:cc:to:subject:message-id:date:from
         :in-reply-to:references:mime-version:x-gm-message-state:from:to:cc
         :subject:date:message-id:reply-to;
        bh=nbpbINSrxfUumV9lwyjlqLA8g7akUpbSjiCjBJP9b4Q=;
        b=PWS9Q6Ndymwj//Zquvu4968qedVSFSt9TSAFd8v77eSsfRZFBEDE9Fasa43hx8olJx
         xwcOTCYtjUJC0CPG1JIM8vJYhIHFMWe05oyv6V0Z6LDQ9fIrNlvKacNn4A9RRzT+r2XS
         MxiBUa7vgC760/GY94ZO9OcHH5zvpr+9qYJuHI228DPu9Ku6NevTPs7C4xq2b6rSHuqr
         wOikbiOdpgJRmHrK0n353z7TUWaZ1u1957SexwzMhKOjPz6Ec8V/8O9Iv7XpDABoyGsw
         jYAp4l4VCmiuEXEy4SL3Nrh/HUsWPJGwa0lF6f7c9fRT7Gm8VUzrs4wVrkD5ziwWfcTK
         ew/Q==
X-Forwarded-Encrypted: i=1; AJvYcCV4E8F487SrCB4arRgH86B5muCyFgRhGW7Qv+lwdWWJnjvmXlnLmn1U1e9IZ0eaWrjdeASpDAmOkOZVEuo=@vger.kernel.org
X-Gm-Message-State: AOJu0YzNx0S9s1S5SvPRvRlX9MWxQhK1+rzyhhtupvGMKW8vJh+A4r+5
	xGhyBJWto7dkUnzzAInImTFSYbhUuu6eEfo0z55rZuZpp4FzLSwQdaNi4dFDeLfy0RlmvoRW3QA
	ShN3KNPQ/KUnbXbufWf/8HaRJzec=
X-Gm-Gg: ASbGncus8b5wvRiQfuyX0m2JDZCMJQ8RG3h0MH7UNMa+N2VnuonN7NwDaw3KPn3sod4
	caA+1CDNiVp0siaV5cnwwfFjOc1rPp1Bdw+k6VA0lULgRX5Cmk6Ui7dC8cNtCkjo/70iAdOCiiF
	EAtFAqZlKrt+jT1k1ir8egKYJNcroKw1rq
X-Google-Smtp-Source: AGHT+IGzkaGVgrKTVWAg6uYcHiRtwbA0R/supqUwGLiy3GtgazMGGDJF+F5gy1Ww2dKzbjTsV1APhcaThlpXeBvRPg8=
X-Received: by 2002:a05:6102:3e8d:b0:4c4:e018:326f with SMTP id
 ada2fe7eead31-4dae53bb727mr916415137.10.1746053401317; Wed, 30 Apr 2025
 15:50:01 -0700 (PDT)
Precedence: bulk
X-Mailing-List: linux-kernel@vger.kernel.org
List-Id: <linux-kernel.vger.kernel.org>
List-Subscribe: <mailto:linux-kernel+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-kernel+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
References: <20250430082651.3152444-1-qun-wei.lin@mediatek.com> <20250430145106.8ce79a05d35cec72aa02baa6@linux-foundation.org>
In-Reply-To: <20250430145106.8ce79a05d35cec72aa02baa6@linux-foundation.org>
From: Barry Song <21cnbao@gmail.com>
Date: Thu, 1 May 2025 10:49:50 +1200
X-Gm-Features: ATxdqUGvtOD0hW5rJBr5f2DF6ZxtN6Be6JTfSzIEhz5_WOzsDzAADbdK5XApyCE
Message-ID: <CAGsJ_4wLuJNe9uPE3-fBNLdiCPBpKt4a1ytuf7-+oiS5rBrg_w@mail.gmail.com>
Subject: Re: [PATCH] mm: Add Kcompressd for accelerated memory compression
To: Andrew Morton <akpm@linux-foundation.org>
Cc: Qun-Wei Lin <qun-wei.lin@mediatek.com>, Mike Rapoport <rppt@kernel.org>, 
	Matthias Brugger <matthias.bgg@gmail.com>, 
	AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>, Nhat Pham <nphamcs@gmail.com>, 
	Sergey Senozhatsky <senozhatsky@chromium.org>, Minchan Kim <minchan@kernel.org>, linux-mm@kvack.org, 
	linux-kernel@vger.kernel.org, linux-arm-kernel@lists.infradead.org, 
	linux-mediatek@lists.infradead.org, Casper Li <casper.li@mediatek.com>, 
	Chinwen Chang <chinwen.chang@mediatek.com>, Andrew Yang <andrew.yang@mediatek.com>, 
	James Hsu <james.hsu@mediatek.com>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

On Thu, May 1, 2025 at 9:51=E2=80=AFAM Andrew Morton <akpm@linux-foundation=
.org> wrote:
>
> On Wed, 30 Apr 2025 16:26:41 +0800 Qun-Wei Lin <qun-wei.lin@mediatek.com>=
 wrote:
>
> > This patch series introduces a new mechanism called kcompressd to
> > improve the efficiency of memory reclaiming in the operating system.
> >
> > Problem:
> >   In the current system, the kswapd thread is responsible for both scan=
ning
> >   the LRU pages and handling memory compression tasks (such as those
> >   involving ZSWAP/ZRAM, if enabled). This combined responsibility can l=
ead
> >   to significant performance bottlenecks, especially under high memory
> >   pressure. The kswapd thread becomes a single point of contention, cau=
sing
> >   delays in memory reclaiming and overall system performance degradatio=
n.
> >
> > Solution:
> >   Introduced kcompressd to handle asynchronous compression during memor=
y
> >   reclaim, improving efficiency by offloading compression tasks from
> >   kswapd. This allows kswapd to focus on its primary task of page recla=
im
> >   without being burdened by the additional overhead of compression.
> >
> > In our handheld devices, we found that applying this mechanism under hi=
gh
> > memory pressure scenarios can increase the rate of pgsteal_anon per sec=
ond
> > by over 260% compared to the situation with only kswapd. Additionally, =
we
> > observed a reduction of over 50% in page allocation stall occurrences,
> > further demonstrating the effectiveness of kcompressd in alleviating me=
mory
> > pressure and improving system responsiveness.
>
> It's a significant change and I'm thinking that broader performance
> testing across a broader range of machines is needed before we can
> confidently upstream such a change.

We ran the same test on our phones and saw the same results as Qun-Wei.
The async compression significantly reduces allocation stalls and improves
reclamation speed. However, I agree that broader testing is needed, and
we=E2=80=99ll also need the zswap team=E2=80=99s help with testing zswap ca=
ses.

>
> Also, it's presumably a small net loss on single-CPU machines (do these
> exist any more?).  Is it hard to disable this feature on such machines?

A net loss is possible, but kswapd can sometimes enter sleep contexts,
allowing the parallel kcompressd thread to continue compression.
This could actually be a win. But I agree that additional testing on
single-CPU machines may be necessary.

It could be disabled by the following if we discover any regression on
single-CPU machines?

if (num_online_cpus() =3D=3D 1)
     return false;

>
> >
> > +static bool swap_sched_async_compress(struct folio *folio)
> > +{
> > +     struct swap_info_struct *sis =3D swp_swap_info(folio->swap);
> > +     int nid =3D numa_node_id();
> > +     pg_data_t *pgdat =3D NODE_DATA(nid);
> > +
> > +     if (unlikely(!pgdat->kcompressd))
> > +             return false;
> > +
> > +     if (!current_is_kswapd())
> > +             return false;
> > +
> > +     if (!folio_test_anon(folio))
> > +             return false;
>
> Are you sure the above three tests are really needed?

Currently, it runs as a per-node thread mainly to accelerate asynchronous
reclamation, which effectively reduces direct reclamation. Since direct
reclamation already follows the slow path, asynchronous compression offers
limited additional benefit in that context. Moreover, it's difficult
to determine
the optimal number of threads for direct reclamation, whereas the  compress=
ion
in the current direct reclamation allows it to utilize all CPUs.

The first condition checks whether kcompressd is present. The second
ensures that we're in kswapd asynchronous reclamation, not direct
reclamation. The third condition might be optimized or dropped, at least fo=
r
swap-backed shmem, and similar cases.

Thanks
Barry

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from mail-qv1-f66.google.com (mail-qv1-f66.google.com [209.85.219.66])
	(using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id A456B1CA84
	for <linux-kernel@vger.kernel.org>; Thu,  1 May 2025 14:02:32 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=209.85.219.66
ARC-Seal:i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1746108154; cv=none; b=d6goYXKiXLEMNTBmtfCIVUHKlulRQgxNEox2JdDQ2/sVpwv8v3RPeDLWXj+ZOT5sJjheL3QRIopChVYNseDECxOdVHfkERRqmz1/yNS4mO5JJ/gZ+lpwtBT+tYqcxqw5nikOyWKpcISQ9pF4EaIaiGAFYllJnoKiJ0zXIML+3ns=
ARC-Message-Signature:i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1746108154; c=relaxed/simple;
	bh=yLfkEC+HJVrswyhnBDKP/tNM/Op3VG40khYCfWbYgsY=;
	h=Date:From:To:Cc:Subject:Message-ID:References:MIME-Version:
	 Content-Type:Content-Disposition:In-Reply-To; b=nHetA6aGiMMuwpwSaPUma8UvrDDgW1OX8PuyXuWx7IYZa9DNThpWHuRBIdbUnvILS3mK+gjU2zjPiQ6wfd6jCCVvft4xYRmMcoNTb8hYmAEhvAoxSY6tdxUJC8BXBO/55hMBkYwXkRn6z7U6Q4654BqQN9L6/sYuFb5R3L6VX6U=
ARC-Authentication-Results:i=1; smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=cmpxchg.org; spf=pass smtp.mailfrom=cmpxchg.org; dkim=pass (2048-bit key) header.d=cmpxchg-org.20230601.gappssmtp.com header.i=@cmpxchg-org.20230601.gappssmtp.com header.b=y68lxEsk; arc=none smtp.client-ip=209.85.219.66
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=cmpxchg.org
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=cmpxchg.org
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=cmpxchg-org.20230601.gappssmtp.com header.i=@cmpxchg-org.20230601.gappssmtp.com header.b="y68lxEsk"
Received: by mail-qv1-f66.google.com with SMTP id 6a1803df08f44-6ecfbf8fa76so14985846d6.0
        for <linux-kernel@vger.kernel.org>; Thu, 01 May 2025 07:02:32 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=cmpxchg-org.20230601.gappssmtp.com; s=20230601; t=1746108151; x=1746712951; darn=vger.kernel.org;
        h=in-reply-to:content-disposition:mime-version:references:message-id
         :subject:cc:to:from:date:from:to:cc:subject:date:message-id:reply-to;
        bh=wsPTvIUlonTz6aoFURvjc48QUmCzpcROb/H1/P6AxH4=;
        b=y68lxEskeUCv88H11H2TsfKsn/FNz2xVaOtwJwM6rpIlP7ofBr/JrATzTpKvANlvEq
         A5Kou4Ju1HFI4dv0CYOeVlpxX1AUlgQ5NEsSEC5lMSwpGPaan/G9eHjMi46SApZk/oIy
         poyHkt95fNqk4j5Y4Dkla7xgaqLHC2HqoRm2RArDj9taa7/BBNeDA7iBDMMgJx90+d+t
         4iEKlMifZTSVXU/fCoGsf+0zEwFCowfxBpTr6HzTUe1HKNYxpR4T0BVrCcHdR3GLqsjh
         L9nMV72g9dsnq8anyA/MgrtBvbglWpCNUuSKDVrbVsEd0WBlfJuQQvXQR0M6v/U/K/L7
         ddPw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20230601; t=1746108151; x=1746712951;
        h=in-reply-to:content-disposition:mime-version:references:message-id
         :subject:cc:to:from:date:x-gm-message-state:from:to:cc:subject:date
         :message-id:reply-to;
        bh=wsPTvIUlonTz6aoFURvjc48QUmCzpcROb/H1/P6AxH4=;
        b=aNMlzC5Z8cZqdYT6ivBJqCKRRVjUYcRoZ8D7HXZvBT7fZ/0I/CvicYeCKb4JZBX2QZ
         zNjs5QXB4Z1X7ec0n4pTdFTCTq3x+C8ZihY4pGK3e8H3CwCEZkvKO5CCPJygHUJae6rY
         jzRAtl+ABqFwwWqkI3Fhr2TbRyZjrA12AJq9eoLbuTCC0R+pQmJ3tby5kmgT8ZDa+4gF
         SmF/u17/Pu7GpJ837K2Rbzwr88/Kw14vC6O7Odw3ZJir4V5RV04rGERXxzpft3/O9EJe
         zAOCj/kvjlMUERxD4tIhLHgPtlSoEvpFtUNrN4Ajz6AL2VspdYqqDje4RumZVBxqIgbi
         dHFw==
X-Forwarded-Encrypted: i=1; AJvYcCUD0clRC1lTHUxrqlzrxL+WzPoRYsHprhYSxYWaa/UncWEOhJ9KXlnR+3TPA59dK13/1HpJiQRZFdIN8+Y=@vger.kernel.org
X-Gm-Message-State: AOJu0YzMW024Esvy0qAI7UmJKMBqDDXzfuxkB501UPtsmn/wNBr7uelG
	VPutsEab9oe5/sTPgjhhB4L8ZC8pNIAbs1PDvGu/WHgJmej98/tvPy61TbV2NT4=
X-Gm-Gg: ASbGnctz9tSJtuc5mWQ3zQUB00pRwWUpF3V5OFXjaJJmqXRnGChg/6cN/X3W77C7lw1
	mGjjKt/qniIv/La2EcAIMZKemv4I7oZJ9xTZ1IlsmE9EkNDgoXy4K+5B8mY71o/edsT6IKVxogx
	c+yW9lRQfWcbMKclCublR8WYbhGROGzZO97AjI/hB6EBMyv9nMgcy5+aG3Aq6bBwbs/wFl8As2h
	PMjzGbDWc49Xf8e0NPjJFdLucPzKC4d/3NmmSa3Pn7IG7qg+aLOaqNz9ikreggURV5F3CNhIzsz
	SiTrZPt9R2ywe2+Sqm6ZfhfMUYLF/1R6nwx5IGYQH+4NJdWnxw==
X-Google-Smtp-Source: AGHT+IHMMzdAha+mSe5FENeDnuJbBSEZwl1rV0kTSW+UDo/woOhAYywdrFjkvAnvanulduGVihb2gQ==
X-Received: by 2002:a05:6214:1306:b0:6e4:3eb1:2bdb with SMTP id 6a1803df08f44-6f4fe1357c5mr100135346d6.43.1746108151086;
        Thu, 01 May 2025 07:02:31 -0700 (PDT)
Received: from localhost ([2603:7000:c01:2716:365a:60ff:fe62:ff29])
        by smtp.gmail.com with UTF8SMTPSA id 6a1803df08f44-6f50f3b058dsm4858996d6.4.2025.05.01.07.02.30
        (version=TLS1_3 cipher=TLS_AES_256_GCM_SHA384 bits=256/256);
        Thu, 01 May 2025 07:02:30 -0700 (PDT)
Date: Thu, 1 May 2025 10:02:26 -0400
From: Johannes Weiner <hannes@cmpxchg.org>
To: Qun-Wei Lin <qun-wei.lin@mediatek.com>
Cc: Andrew Morton <akpm@linux-foundation.org>,
	Mike Rapoport <rppt@kernel.org>,
	Matthias Brugger <matthias.bgg@gmail.com>,
	AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>,
	Nhat Pham <nphamcs@gmail.com>,
	Sergey Senozhatsky <senozhatsky@chromium.org>,
	Minchan Kim <minchan@kernel.org>, linux-mm@kvack.org,
	linux-kernel@vger.kernel.org, linux-arm-kernel@lists.infradead.org,
	linux-mediatek@lists.infradead.org,
	Casper Li <casper.li@mediatek.com>,
	Chinwen Chang <chinwen.chang@mediatek.com>,
	Andrew Yang <andrew.yang@mediatek.com>,
	James Hsu <james.hsu@mediatek.com>, Barry Song <21cnbao@gmail.com>
Subject: Re: [PATCH] mm: Add Kcompressd for accelerated memory compression
Message-ID: <20250501140226.GE2020@cmpxchg.org>
References: <20250430082651.3152444-1-qun-wei.lin@mediatek.com>
Precedence: bulk
X-Mailing-List: linux-kernel@vger.kernel.org
List-Id: <linux-kernel.vger.kernel.org>
List-Subscribe: <mailto:linux-kernel+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-kernel+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20250430082651.3152444-1-qun-wei.lin@mediatek.com>

On Wed, Apr 30, 2025 at 04:26:41PM +0800, Qun-Wei Lin wrote:
> This patch series introduces a new mechanism called kcompressd to
> improve the efficiency of memory reclaiming in the operating system.
> 
> Problem:
>   In the current system, the kswapd thread is responsible for both scanning
>   the LRU pages and handling memory compression tasks (such as those
>   involving ZSWAP/ZRAM, if enabled). This combined responsibility can lead
>   to significant performance bottlenecks, especially under high memory
>   pressure. The kswapd thread becomes a single point of contention, causing
>   delays in memory reclaiming and overall system performance degradation.
> 
> Solution:
>   Introduced kcompressd to handle asynchronous compression during memory
>   reclaim, improving efficiency by offloading compression tasks from
>   kswapd. This allows kswapd to focus on its primary task of page reclaim
>   without being burdened by the additional overhead of compression.
> 
> In our handheld devices, we found that applying this mechanism under high
> memory pressure scenarios can increase the rate of pgsteal_anon per second
> by over 260% compared to the situation with only kswapd. Additionally, we
> observed a reduction of over 50% in page allocation stall occurrences,
> further demonstrating the effectiveness of kcompressd in alleviating memory
> pressure and improving system responsiveness.

Yes, I think parallelizing this work makes a lot of sense.

> Co-developed-by: Barry Song <21cnbao@gmail.com>
> Signed-off-by: Barry Song <21cnbao@gmail.com>
> Signed-off-by: Qun-Wei Lin <qun-wei.lin@mediatek.com>
> Reference: Re: [PATCH 0/2] Improve Zram by separating compression context from kswapd - Barry Song
>            https://lore.kernel.org/lkml/20250313093005.13998-1-21cnbao@gmail.com/
> ---
>  include/linux/mmzone.h |  6 ++++
>  mm/mm_init.c           |  1 +
>  mm/page_io.c           | 71 ++++++++++++++++++++++++++++++++++++++++++
>  mm/swap.h              |  6 ++++
>  mm/vmscan.c            | 25 +++++++++++++++
>  5 files changed, 109 insertions(+)
> 
> diff --git a/include/linux/mmzone.h b/include/linux/mmzone.h
> index 6ccec1bf2896..93c9195a54ae 100644
> --- a/include/linux/mmzone.h
> +++ b/include/linux/mmzone.h
> @@ -23,6 +23,7 @@
>  #include <linux/page-flags.h>
>  #include <linux/local_lock.h>
>  #include <linux/zswap.h>
> +#include <linux/kfifo.h>
>  #include <asm/page.h>
>  
>  /* Free memory management - zoned buddy allocator.  */
> @@ -1398,6 +1399,11 @@ typedef struct pglist_data {
>  
>  	int kswapd_failures;		/* Number of 'reclaimed == 0' runs */
>  
> +#define KCOMPRESS_FIFO_SIZE 256
> +	wait_queue_head_t kcompressd_wait;
> +	struct task_struct *kcompressd;
> +	struct kfifo kcompress_fifo;

The way you implemented this adds time-and-space overhead even on
systems that don't have any sort of swap compression enabled.

That seems unnecessary. There is an existing method for asynchronous
writeback, and pageout() is naturally fully set up to handle this.

IMO the better way to do this is to make zswap_store() (and
zram_bio_write()?) asynchronous. Make those functions queue the work
and wake the compression daemon, and then have the daemon call
folio_end_writeback() / bio_endio() when it's done with it.

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from mail-qv1-f53.google.com (mail-qv1-f53.google.com [209.85.219.53])
	(using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id D0E7F33C9
	for <linux-kernel@vger.kernel.org>; Thu,  1 May 2025 15:13:00 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=209.85.219.53
ARC-Seal:i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1746112382; cv=none; b=tRUDtXecv+SrpISfA1BUb2qR8obBDlVKXRG/tGVkavZq+osXduPB3NCZOUgbmF8LB38jGFoVu4xBIrTXaRnAoG8E4zHamE+iI1n5jN6FnoqsNnPJDfcXRrtWpf0Of+9f4YsC0hzQOvXxXuzmAIUYhtivOvlF2QHgJzngjPg2R/8=
ARC-Message-Signature:i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1746112382; c=relaxed/simple;
	bh=xQYoQ6blzMcLADqk42repQh467cCu5FADPOPWsPwKR4=;
	h=MIME-Version:References:In-Reply-To:From:Date:Message-ID:Subject:
	 To:Cc:Content-Type; b=p1wwEXzbmRmMmtph5QpZJb3FpfxBRqC4voxKdfwYGW/txqbH14p8DXDpAtx9Iw9miacQYdvfPVCKyXo9otL+g6MPqHCP0KmX3XR+wF8qrav1OA3aDNHDBIWjwy+Xg2WdD8mZ0pT3ZfH+7lXXorASCVmDBslWbRtr5t4xfemR8HE=
ARC-Authentication-Results:i=1; smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=gmail.com; spf=pass smtp.mailfrom=gmail.com; dkim=pass (2048-bit key) header.d=gmail.com header.i=@gmail.com header.b=V97jI2o6; arc=none smtp.client-ip=209.85.219.53
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=gmail.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=gmail.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=gmail.com header.i=@gmail.com header.b="V97jI2o6"
Received: by mail-qv1-f53.google.com with SMTP id 6a1803df08f44-6ecfc2cb1aaso12732776d6.3
        for <linux-kernel@vger.kernel.org>; Thu, 01 May 2025 08:13:00 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20230601; t=1746112380; x=1746717180; darn=vger.kernel.org;
        h=content-transfer-encoding:cc:to:subject:message-id:date:from
         :in-reply-to:references:mime-version:from:to:cc:subject:date
         :message-id:reply-to;
        bh=xQYoQ6blzMcLADqk42repQh467cCu5FADPOPWsPwKR4=;
        b=V97jI2o6ciTdQpRROpxahdN+hKPRb+XbbZnKGb7FnCWp0KNCSdQN6/9F1KoFcQKblA
         4kel0X5Nhi6AN8NKjSOS3Fvonkgls0NMk6c+c1PHI6DHUOSVZKKnURb2avRCLOO1ksyb
         GulKS7YyXzBKSYPcjVyJWH8/DyAOcDrCoZc3YVh6WEVee20s8Dqsfc9J1rA+KsbGGHoj
         1vns7nZfmarpImx1D5JKERzUSuyiULp6Pye00ouItZvKU1atF2yqC2P7dPUVLG3X8YVs
         d3bWSBnju+1AIsgwbIeISrT1FzP7ps3KPDMfzRCrxoSPvrfaSqJhIycF/NikAoiUMNe9
         6BAg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20230601; t=1746112380; x=1746717180;
        h=content-transfer-encoding:cc:to:subject:message-id:date:from
         :in-reply-to:references:mime-version:x-gm-message-state:from:to:cc
         :subject:date:message-id:reply-to;
        bh=xQYoQ6blzMcLADqk42repQh467cCu5FADPOPWsPwKR4=;
        b=xQySJTpw+3Df1UfHB198XLwzsjO11DrkeR8XOZnTA6AKy7jrQiY0Q9LJ1jApn8RlhE
         UCG1ydB0co0PMM2qkFPK6lTIUUeeSeR65cykJ2Fkpz5GL40YPt/O/FgBb2Rj9fTnf8CX
         DQGygu1XJzfxfM0hjjjEsVDad65pma9ibr9WvJtdF+t/Jbt5bpGivWhV0cDmvFamuQY6
         FQeae5eqqyf/n4wNyZW4A6ykwcjJn9HAJ402RdAsc5VSgBhotJ+vR2RfVCdBUcfdHW6R
         zrkHeFqWQRzPaDDCvwqHstoK/6ta2WUm5/eE9i7uKIbgzn0AQj1pTWJURfa4Jk1xQXrV
         z2AA==
X-Forwarded-Encrypted: i=1; AJvYcCXbQv5T7Pcyfr6qcHgrsFAMAvCOU5GwRBtB9Xh9Po4Akf3P1uyqx3iomZd2pAxbVClCgNWEAsbnSTA+jc4=@vger.kernel.org
X-Gm-Message-State: AOJu0YzDUxasPb5C3UQ/ppuyu45ZqPWvB2FK35g+ChBKPINuzvFU9j7O
	c5BbNaT1inhkrAB2TmlbBcV0jzyUtT4rll/kHJc5hgXqwmrsLXOXioo1NwPEqLR28DouWLYolE+
	Xptc1k4ejkuF8dfl72Shnown7tQU=
X-Gm-Gg: ASbGnct1PDuXq6nNJMnYSg6A2n3YpEY5NTBUQSsM63JUW5q+ULcxICZCmVKt/4Qza7l
	yLr1QO4/G5YS2v9QXY+SEUbvbFKcTEmEiO3YVODFeHwn20Q1Yy0KMlN36UZ1T9lI3/Em1j5KnrC
	L9zhX6uB1txbU+tdb1XJ9YOBo=
X-Google-Smtp-Source: AGHT+IGAdTAkywowhkq9htFUL863njyM7arTMBHIbku24t5R7jVNw6BjMXmXswwZnPdgrERB600zafxI6/iVqN/kPo4=
X-Received: by 2002:a05:6214:410d:b0:6e8:fbb7:6769 with SMTP id
 6a1803df08f44-6f50a91ffbbmr48422286d6.14.1746112379547; Thu, 01 May 2025
 08:12:59 -0700 (PDT)
Precedence: bulk
X-Mailing-List: linux-kernel@vger.kernel.org
List-Id: <linux-kernel.vger.kernel.org>
List-Subscribe: <mailto:linux-kernel+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-kernel+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
References: <20250430082651.3152444-1-qun-wei.lin@mediatek.com> <20250501140226.GE2020@cmpxchg.org>
In-Reply-To: <20250501140226.GE2020@cmpxchg.org>
From: Nhat Pham <nphamcs@gmail.com>
Date: Thu, 1 May 2025 08:12:48 -0700
X-Gm-Features: ATxdqUHwMXp9jU8G8_cQ9P3g5XjhCdDwSp9AbCfZOwreqQLiBgW7BVs0NuAIwgQ
Message-ID: <CAKEwX=MsP6LGjMRNyaHnO5MkE_ne-u-cKLbGfVQcSR-ALoxBwA@mail.gmail.com>
Subject: Re: [PATCH] mm: Add Kcompressd for accelerated memory compression
To: Johannes Weiner <hannes@cmpxchg.org>
Cc: Qun-Wei Lin <qun-wei.lin@mediatek.com>, Andrew Morton <akpm@linux-foundation.org>, 
	Mike Rapoport <rppt@kernel.org>, Matthias Brugger <matthias.bgg@gmail.com>, 
	AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>, 
	Sergey Senozhatsky <senozhatsky@chromium.org>, Minchan Kim <minchan@kernel.org>, linux-mm@kvack.org, 
	linux-kernel@vger.kernel.org, linux-arm-kernel@lists.infradead.org, 
	linux-mediatek@lists.infradead.org, Casper Li <casper.li@mediatek.com>, 
	Chinwen Chang <chinwen.chang@mediatek.com>, Andrew Yang <andrew.yang@mediatek.com>, 
	James Hsu <james.hsu@mediatek.com>, Barry Song <21cnbao@gmail.com>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

On Thu, May 1, 2025 at 7:02=E2=80=AFAM Johannes Weiner <hannes@cmpxchg.org>=
 wrote:
>
>
> The way you implemented this adds time-and-space overhead even on
> systems that don't have any sort of swap compression enabled.
>
> That seems unnecessary. There is an existing method for asynchronous
> writeback, and pageout() is naturally fully set up to handle this.
>
> IMO the better way to do this is to make zswap_store() (and
> zram_bio_write()?) asynchronous. Make those functions queue the work
> and wake the compression daemon, and then have the daemon call
> folio_end_writeback() / bio_endio() when it's done with it.

+1.

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from mail-qv1-f44.google.com (mail-qv1-f44.google.com [209.85.219.44])
	(using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 62E741BF37
	for <linux-kernel@vger.kernel.org>; Thu,  1 May 2025 15:50:36 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=209.85.219.44
ARC-Seal:i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1746114638; cv=none; b=n+Uh512xIPtjKwzqqXz71Xj7ajYHr0iRAyRssd3FADMZzq6WzS6U0Bb8Z/KVsl88KriVwBYY5w/tw26yU8eixAvUszvgjQsvNgu9J9ZFl0iw2pMOHZgNUObUTkasfO4sityEtk3eWsBAL7C+76xr3EMXT2GGlQ4rdfRk/3rEdIY=
ARC-Message-Signature:i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1746114638; c=relaxed/simple;
	bh=05nuWxwJrP6ImppPLRwI3J3jYWNxBGDtGXMQ2/2UM68=;
	h=MIME-Version:References:In-Reply-To:From:Date:Message-ID:Subject:
	 To:Cc:Content-Type; b=oBFNEiZ/Y4Dk6RELFRdi65JKvEA6WLTpdezCjoX29CU0cGjT2FMpjB6FL3Kh5d2wzfqubT2OvNArgu9J0+PfyGWV6M6h067nLwETpktLXD0AysNOD8ENwNFVPe1UEGyAt881S50K0Mk1t7qWwQXghZL2vNbsQmFKafDvwjrAT3s=
ARC-Authentication-Results:i=1; smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=gmail.com; spf=pass smtp.mailfrom=gmail.com; dkim=pass (2048-bit key) header.d=gmail.com header.i=@gmail.com header.b=M9eStOQa; arc=none smtp.client-ip=209.85.219.44
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=gmail.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=gmail.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=gmail.com header.i=@gmail.com header.b="M9eStOQa"
Received: by mail-qv1-f44.google.com with SMTP id 6a1803df08f44-6ecf99dd567so16715836d6.0
        for <linux-kernel@vger.kernel.org>; Thu, 01 May 2025 08:50:36 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20230601; t=1746114635; x=1746719435; darn=vger.kernel.org;
        h=content-transfer-encoding:cc:to:subject:message-id:date:from
         :in-reply-to:references:mime-version:from:to:cc:subject:date
         :message-id:reply-to;
        bh=e/gkyM3oFDnDmiC4diCmIxvY145pRyMQi2rIkFSJT9c=;
        b=M9eStOQa44UhzutWGVD/KXLxwC6gCuw0oZI3O4LvGwGoPprJdB0V14jZIIW6/AEGcc
         wRDBqkcCMuj3NYd5wKV6aRGotsyN172vELe00zvoVgiNoH23SVDL2wnW8DPyjxWSb6t2
         gVQH5LiProDE72wNDwzDLg6sMcKYAaTriznDot1AdNgQLoEc6ev1TzzGsjhoTeW1o4LK
         xYk0c9iP3ezLQcC0WCLqezMMQo8yrK6zfah2MivDXcHiLGBf/mvMM1DIZF9GXIW+g7Wl
         nH/4t/ScZJ1Y1YXvS0pLrEQDJL1pkYpS17+MacvFBRfauj3Yn0VbAwQJXk7NCSdFgUG2
         NyQg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20230601; t=1746114635; x=1746719435;
        h=content-transfer-encoding:cc:to:subject:message-id:date:from
         :in-reply-to:references:mime-version:x-gm-message-state:from:to:cc
         :subject:date:message-id:reply-to;
        bh=e/gkyM3oFDnDmiC4diCmIxvY145pRyMQi2rIkFSJT9c=;
        b=pRGwq+Mm95QtYQ5fLD5szLgDl+Ax8eBd26UqjoqCNLTsKCSXF4NJERmVA/JJxpHQdE
         nDlv+2d7+E9jFeG7c8unfSdnupPxBr2E1B4fo4AnSI/KDRp9bpp5mneCdw7uZsFwj0f8
         7DgX2VZZ5bfWiWnxE1TjDzKJ2c02L5y/jASNcoMpoRck/GT5LLh/1cKx29/W7NvKEGXd
         8RzPOJI0QQdAGJBHUJBAgdeHOP1/lr4cQmjTtejeUCvZcFJhjKlIr4x6bIOJMfWilWZm
         hnKfX9PrfI5rJh/LjJVqvRdUuOF3GM+xwvMtaZ+ciCcIbbGvS6Hd40TV4Gf6TaAdx5kP
         Afcg==
X-Forwarded-Encrypted: i=1; AJvYcCXgb5RlPApRH0+rtlG7iOVQHBrPqC5dCLSuthBM2b3qjiv1t8IIzUDzpgJifrRPNgYqTc8CKMA3OBfCRn0=@vger.kernel.org
X-Gm-Message-State: AOJu0YxKLnI5aYP9FzLZdIO6lSUhvRhgGxSL0dcETq/iT3oDOPmfvUWb
	Km80H+wEII7POqkHFl3d20lMHoa8gtoSyXOTqhDvvkMlQjqQzpixCsaiRnGsK7lTd+s3sbb3hXe
	PqNHkA4o1Nw3vtNS3FjeilDRmUlg=
X-Gm-Gg: ASbGncsI7NxAUW2CEuPAFsG7yJVKQpmiv98JRtTM1B1DK3JtFCw4P4tVu/iPDvAONMg
	cWVo1qLuW9QVqHNcX1/rMDZlqcWXKCxCw5TuP15QNxtH3+CHPFbWMJit8kYJWAY4hxZKYcZs6wQ
	vJA+dZLrnDTmzFGdhKKlIL864=
X-Google-Smtp-Source: AGHT+IHO/1JjpQlA3vZ2eRSDQvhzoweYMhYgCYf17uHdH7Vil20W5pGnhp9djE4FSIg3al8nnvRqCoV7aBjmQR5yuEs=
X-Received: by 2002:a05:6214:d85:b0:6ed:122c:7da7 with SMTP id
 6a1803df08f44-6f50a8fa520mr51081636d6.5.1746114635123; Thu, 01 May 2025
 08:50:35 -0700 (PDT)
Precedence: bulk
X-Mailing-List: linux-kernel@vger.kernel.org
List-Id: <linux-kernel.vger.kernel.org>
List-Subscribe: <mailto:linux-kernel+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-kernel+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
References: <20250430082651.3152444-1-qun-wei.lin@mediatek.com>
In-Reply-To: <20250430082651.3152444-1-qun-wei.lin@mediatek.com>
From: Nhat Pham <nphamcs@gmail.com>
Date: Thu, 1 May 2025 08:50:24 -0700
X-Gm-Features: ATxdqUGn8eYuPIj4I1IzzOIEq-VCYnYbbowQLijhdEqfyu9by8KrA7NerQXniyA
Message-ID: <CAKEwX=MNVwd_Z1PyBt7swd2VhUVivRN-5E+kHm-3XAPka0d84w@mail.gmail.com>
Subject: Re: [PATCH] mm: Add Kcompressd for accelerated memory compression
To: Qun-Wei Lin <qun-wei.lin@mediatek.com>
Cc: Andrew Morton <akpm@linux-foundation.org>, Mike Rapoport <rppt@kernel.org>, 
	Matthias Brugger <matthias.bgg@gmail.com>, 
	AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>, 
	Sergey Senozhatsky <senozhatsky@chromium.org>, Minchan Kim <minchan@kernel.org>, linux-mm@kvack.org, 
	linux-kernel@vger.kernel.org, linux-arm-kernel@lists.infradead.org, 
	linux-mediatek@lists.infradead.org, Casper Li <casper.li@mediatek.com>, 
	Chinwen Chang <chinwen.chang@mediatek.com>, Andrew Yang <andrew.yang@mediatek.com>, 
	James Hsu <james.hsu@mediatek.com>, Barry Song <21cnbao@gmail.com>, 
	Johannes Weiner <hannes@cmpxchg.org>, Yosry Ahmed <yosry.ahmed@linux.dev>, 
	Chengming Zhou <chengming.zhou@linux.dev>, Shakeel Butt <shakeel.butt@linux.dev>, 
	Kairui Song <ryncsn@gmail.com>, Joshua Hahn <joshua.hahnjy@gmail.com>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

On Wed, Apr 30, 2025 at 1:27=E2=80=AFAM Qun-Wei Lin <qun-wei.lin@mediatek.c=
om> wrote:
>
> This patch series introduces a new mechanism called kcompressd to
> improve the efficiency of memory reclaiming in the operating system.
>
> Problem:
>   In the current system, the kswapd thread is responsible for both scanni=
ng
>   the LRU pages and handling memory compression tasks (such as those
>   involving ZSWAP/ZRAM, if enabled). This combined responsibility can lea=
d
>   to significant performance bottlenecks, especially under high memory
>   pressure. The kswapd thread becomes a single point of contention, causi=
ng
>   delays in memory reclaiming and overall system performance degradation.
>
> Solution:
>   Introduced kcompressd to handle asynchronous compression during memory
>   reclaim, improving efficiency by offloading compression tasks from
>   kswapd. This allows kswapd to focus on its primary task of page reclaim
>   without being burdened by the additional overhead of compression.
>
> In our handheld devices, we found that applying this mechanism under high
> memory pressure scenarios can increase the rate of pgsteal_anon per secon=
d
> by over 260% compared to the situation with only kswapd. Additionally, we
> observed a reduction of over 50% in page allocation stall occurrences,
> further demonstrating the effectiveness of kcompressd in alleviating memo=
ry
> pressure and improving system responsiveness.
>

Oh btw, testing this on a simple kernel building task triggers this:

[  133.349908] WARNING: CPU: 0 PID: 50 at mm/memcontrol.c:5330
obj_cgroup_charge_zswap+0x22e/0x250
[  133.350505] Modules linked in: virtio_net pata_acpi net_failover
failover virtio_rng rng_core ata_piix libata scsi_mod scsi_common
[  133.351366] CPU: 0 UID: 0 PID: 50 Comm: kcompressd0 Not tainted
6.14.0-ge65b549702a5 #218
[  133.351940] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996),
BIOS rel-1.16.0-0-gd239552ce722-prebuilt.qemu.org 04/01/2014
[  133.352717] RIP: 0010:obj_cgroup_charge_zswap+0x22e/0x250
[  133.353118] Code: d2 ff 85 c0 0f 85 7a fe ff ff be ff ff ff ff 48
c7 c7 88 da f1 91 e8 a1 b4 a3 00 85 c0 0f 85 61 fe ff ff 0f 0b e9 5a
fe ff ff <0f> 0b e9 f5 fd ff ff e8 36 ae a3 00 e9 78 fe ff ff e8 2c ae
a3 00
[  133.354372] RSP: 0018:ffff9f99803bbc00 EFLAGS: 00010246
[  133.354782] RAX: ffff970f42a9a900 RBX: 000000000000013e RCX: 00000000000=
00002
[  133.355269] RDX: 0000000000000000 RSI: 000000000000013e RDI: ffff970f475=
eab40
[  133.355774] RBP: ffff970f475eab40 R08: 0000000000000000 R09: 00000000000=
00000
[  133.356269] R10: ffffffff90a21205 R11: ffffffff90a211ab R12: ffffffff90a=
21205
[  133.356782] R13: ffffc4984041ff40 R14: ffff970f42e66000 R15: 00000000000=
0013e
[  133.357279] FS:  0000000000000000(0000) GS:ffff970fbdc00000(0000)
knlGS:0000000000000000
[  133.357807] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
[  133.358186] CR2: 00007f33950c5030 CR3: 00000000038ea000 CR4: 00000000000=
006f0
[  133.358656] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 00000000000=
00000
[  133.359121] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 00000000000=
00400
[  133.359597] Call Trace:
[  133.359767]  <TASK>
[  133.359914]  ? __warn+0x94/0x190
[  133.360136]  ? obj_cgroup_charge_zswap+0x22e/0x250
[  133.360476]  ? report_bug+0x168/0x170
[  133.360742]  ? handle_bug+0x53/0x90
[  133.360982]  ? exc_invalid_op+0x18/0x70
[  133.361240]  ? asm_exc_invalid_op+0x1a/0x20
[  133.361536]  ? zswap_store+0x755/0xf80
[  133.361798]  ? zswap_store+0x6fb/0xf80
[  133.362071]  ? zswap_store+0x755/0xf80
[  133.362338]  ? obj_cgroup_charge_zswap+0x22e/0x250
[  133.362661]  ? zswap_store+0x755/0xf80
[  133.362943]  zswap_store+0x7e7/0xf80
[  133.363203]  ? __pfx_kcompressd+0x10/0x10
[  133.363472]  kcompressd+0xb1/0x180
[  133.363724]  ? __pfx_autoremove_wake_function+0x10/0x10
[  133.364082]  kthread+0xef/0x230
[  133.364298]  ? __pfx_kthread+0x10/0x10
[  133.364548]  ret_from_fork+0x34/0x50
[  133.364810]  ? __pfx_kthread+0x10/0x10
[  133.365063]  ret_from_fork_asm+0x1a/0x30
[  133.365321]  </TASK>
[  133.365471] irq event stamp: 18
[  133.365680] hardirqs last  enabled at (17): [<ffffffff914bd0ef>]
_raw_spin_unlock_irqrestore+0x4f/0x60
[  133.366289] hardirqs last disabled at (18): [<ffffffff914b2031>]
__schedule+0x6b1/0xe80
[  133.366824] softirqs last  enabled at (0): [<ffffffff906b1caf>]
copy_process+0x9af/0x2b50
[  133.367366] softirqs last disabled at (0): [<0000000000000000>] 0x0
[  133.367844] ---[ end trace 0000000000000000 ]---

Seems like we're trigger this warning in the zswap cgroup check (see
obj_cgroup_may_zswap() in mm/memcontrol.c for more details):

VM_WARN_ON_ONCE(!(current->flags & PF_MEMALLOC));

Might wanna fix this...

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from mailgw02.mediatek.com (unknown [210.61.82.184])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 420C938DF9
	for <linux-kernel@vger.kernel.org>; Fri,  2 May 2025 09:16:23 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=210.61.82.184
ARC-Seal:i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1746177387; cv=fail; b=q14qsDZmr0vlHbwPYBxhVr6GB9HAoAT2SCwddTr25jz887Q7xSxsp4JigH2mSgR1NRH9tMDjPSq3GQHniisv286CTz/4k8zA8vUxfzNnG3j++v+mtAvNl1O97968raIniH4ozUg10bdaiT3mXtTGAwOtDKt08GDKoAl03+zBTcU=
ARC-Message-Signature:i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1746177387; c=relaxed/simple;
	bh=5W20X1Bnuhkf4cTkag1YrEKhEHrHz9YEfyjt9Klm/k8=;
	h=From:To:CC:Subject:Date:Message-ID:References:In-Reply-To:
	 Content-Type:MIME-Version; b=B33f1qSmLxkEBvXCZteNEHNCBheKRwrH37zbrVcVX532UCqpfHrrf8yx1QAqRGkins0Ir8adPqk+9aWt0+NTuKafqe++9bBp6JPfKggEXGmSK6E2s7oEgAptprmBilCtfITOCMXafq20TqXV6pfJrJ9eobCEteMtIOnLAV1DIzk=
ARC-Authentication-Results:i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=mediatek.com; spf=pass smtp.mailfrom=mediatek.com; dkim=pass (1024-bit key) header.d=mediatek.com header.i=@mediatek.com header.b=Q60GWC8t; dkim=pass (1024-bit key) header.d=mediateko365.onmicrosoft.com header.i=@mediateko365.onmicrosoft.com header.b=unV62aef; arc=fail smtp.client-ip=210.61.82.184
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=mediatek.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=mediatek.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=mediatek.com header.i=@mediatek.com header.b="Q60GWC8t";
	dkim=pass (1024-bit key) header.d=mediateko365.onmicrosoft.com header.i=@mediateko365.onmicrosoft.com header.b="unV62aef"
X-UUID: 14d51804273611f082f7f7ac98dee637-20250502
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed; d=mediatek.com; s=dk;
	h=MIME-Version:Content-Transfer-Encoding:Content-ID:Content-Type:In-Reply-To:References:Message-ID:Date:Subject:CC:To:From; bh=5W20X1Bnuhkf4cTkag1YrEKhEHrHz9YEfyjt9Klm/k8=;
	b=Q60GWC8thrwuXo2TGczoNrXbw/yapjS9pVQUHOW7E/yUoDaS+PaxyqJo/4eE5XlDJi3/6fAxrqueTqYvXpOhUn87WtIjnf/3/WVLx3QA+tUvJc+W3AEQmd/QCHKOfTIi92GUlnzWOOizvjIz+o1ff5jtsuGWdDy4YutaZVSNIpE=;
X-CID-P-RULE: Release_Ham
X-CID-O-INFO: VERSION:1.2.1,REQID:303e4717-63dd-4902-bf82-f9765bc9a2c6,IP:0,UR
	L:0,TC:0,Content:0,EDM:0,RT:0,SF:0,FILE:0,BULK:0,RULE:Release_Ham,ACTION:r
	elease,TS:0
X-CID-META: VersionHash:0ef645f,CLOUDID:fa441b70-e08c-41ab-89e8-3ba0a33da853,B
	ulkID:nil,BulkQuantity:0,Recheck:0,SF:80|81|82|83|102|110|111,TC:nil,Conte
	nt:0|50,EDM:-3,IP:nil,URL:1,File:nil,RT:nil,Bulk:nil,QS:nil,BEC:nil,COL:0,
	OSI:0,OSA:0,AV:0,LES:1,SPR:NO,DKR:0,DKP:0,BRR:0,BRE:0,ARC:0
X-CID-BVR: 0,NGT
X-CID-BAS: 0,NGT,0,_
X-CID-FACTOR: TF_CID_SPAM_SNR,TF_CID_SPAM_ULS
X-UUID: 14d51804273611f082f7f7ac98dee637-20250502
Received: from mtkmbs09n1.mediatek.inc [(172.21.101.35)] by mailgw02.mediatek.com
	(envelope-from <qun-wei.lin@mediatek.com>)
	(Generic MTA with TLSv1.2 ECDHE-RSA-AES256-GCM-SHA384 256/256)
	with ESMTP id 413645321; Fri, 02 May 2025 17:16:07 +0800
Received: from mtkmbs10n1.mediatek.inc (172.21.101.34) by
 MTKMBS09N2.mediatek.inc (172.21.101.94) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.2.1258.39; Fri, 2 May 2025 17:16:06 +0800
Received: from TYPPR03CU001.outbound.protection.outlook.com (172.21.101.237)
 by mtkmbs10n1.mediatek.inc (172.21.101.34) with Microsoft SMTP Server id
 15.2.1258.39 via Frontend Transport; Fri, 2 May 2025 17:16:06 +0800
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=cRm6fnXZLM2IhZdGgG6FNQ9P1Wqz16SmZs/6tOFDSaVqHyOKqZozVtANBUV3mE6NRYJ6R6RaCoOy9aorqLQkIAqG9zNxQxghS+lUxSrsJflYR9++InuDszKRVBqyRynmoJRIR/BMOqTBjP1t0PdAgQg+G2d8XaVAZfLdJljVsse0iVNmPLZHXShRWl7b9u2N02FkegPFsuBLjbSbFhUouYD0IWiYtkcSilOIGOv3t2V9m7Qoep2CniIKAVw4LjX/pzvlA35C0iRmwgQ2UDa88MKmhqoV7QkudDqOs+XG1dk0+K94hhR2xBznmQ3FybCZs+GNcRLV3/bZoPYemZpNhw==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=5W20X1Bnuhkf4cTkag1YrEKhEHrHz9YEfyjt9Klm/k8=;
 b=qwIEbylE+60RJmTxgX6L5AU8qByeas7Ap2nytcbLRLwMVWj9CWZouAOALURepC48rOuNXxYNKy1I24+dEsNQ3pAMMz82t3HhCFMYNgflLOQFSDyc5y4zSEB2+sCqON19KKAaPs+VfRdIEw5Wodmwzj+PWHwK609ZyHSUeW8dWT3lJho6APwXiTbPAIrAQQAN1hV83volKWAywZufbWWlKscZBpgYiF+NFuSfmoVLr3VbLy8MLrDrvIn4CUPcDc03JhU5iRYv3A5EwVYHJlIm1HANOkFd+BevKEN4eHjgMfphOh8DhCfC2FOZ4+uTdEL77CYW8MA/31yZamGk9GBJ2Q==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=mediatek.com; dmarc=pass action=none header.from=mediatek.com;
 dkim=pass header.d=mediatek.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=mediateko365.onmicrosoft.com; s=selector2-mediateko365-onmicrosoft-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=5W20X1Bnuhkf4cTkag1YrEKhEHrHz9YEfyjt9Klm/k8=;
 b=unV62aef2Uz/W7plfRBmGFrKRfVqChjxXe8zI0w6ujd1//I6SsbCEUZ3DoVP/fMJ5JhZG1DHjnktBwuNI87XFF2CmdzL0RuzeMhFf2vzZp4822vfKuoydk1fsUdojqqhlt2eSNskqj3ypfQva/5YGK0l4wlDAfvIlkgHKcFJAIM=
Received: from PSAPR03MB5542.apcprd03.prod.outlook.com (2603:1096:301:4e::12)
 by SEYPR03MB8389.apcprd03.prod.outlook.com (2603:1096:101:20d::8) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.8678.31; Fri, 2 May
 2025 09:16:02 +0000
Received: from PSAPR03MB5542.apcprd03.prod.outlook.com
 ([fe80::a323:3128:209c:f02]) by PSAPR03MB5542.apcprd03.prod.outlook.com
 ([fe80::a323:3128:209c:f02%6]) with mapi id 15.20.8699.019; Fri, 2 May 2025
 09:16:01 +0000
From: =?utf-8?B?UXVuLXdlaSBMaW4gKOael+e+pOW0tCk=?= <Qun-wei.Lin@mediatek.com>
To: "hannes@cmpxchg.org" <hannes@cmpxchg.org>
CC: =?utf-8?B?QW5kcmV3IFlhbmcgKOaliuaZuuW8tyk=?= <Andrew.Yang@mediatek.com>,
	"rppt@kernel.org" <rppt@kernel.org>, "nphamcs@gmail.com" <nphamcs@gmail.com>,
	"21cnbao@gmail.com" <21cnbao@gmail.com>,
	=?utf-8?B?SmFtZXMgSHN1ICjlvpDmhbbolrAp?= <James.Hsu@mediatek.com>,
	AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>,
	"akpm@linux-foundation.org" <akpm@linux-foundation.org>,
	"linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
	"linux-mediatek@lists.infradead.org" <linux-mediatek@lists.infradead.org>,
	"linux-mm@kvack.org" <linux-mm@kvack.org>,
	=?utf-8?B?Q2hpbndlbiBDaGFuZyAo5by16Yym5paHKQ==?=
	<chinwen.chang@mediatek.com>, =?utf-8?B?Q2FzcGVyIExpICjmnY7kuK3mpq4p?=
	<casper.li@mediatek.com>, "minchan@kernel.org" <minchan@kernel.org>,
	"linux-arm-kernel@lists.infradead.org"
	<linux-arm-kernel@lists.infradead.org>, "matthias.bgg@gmail.com"
	<matthias.bgg@gmail.com>, "senozhatsky@chromium.org"
	<senozhatsky@chromium.org>
Subject: Re: [PATCH] mm: Add Kcompressd for accelerated memory compression
Thread-Topic: [PATCH] mm: Add Kcompressd for accelerated memory compression
Thread-Index: AQHbuam75fKFDYRy3kqH05cQs0i7u7O90AIAgAFCT4A=
Date: Fri, 2 May 2025 09:16:01 +0000
Message-ID: <bf1db02cc0e7682e8f6eea4d0d61f6f249536163.camel@mediatek.com>
References: <20250430082651.3152444-1-qun-wei.lin@mediatek.com>
	 <20250501140226.GE2020@cmpxchg.org>
In-Reply-To: <20250501140226.GE2020@cmpxchg.org>
Accept-Language: zh-TW, en-US
Content-Language: en-US
X-MS-Has-Attach:
X-MS-TNEF-Correlator:
authentication-results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=mediatek.com;
x-ms-publictraffictype: Email
x-ms-traffictypediagnostic: PSAPR03MB5542:EE_|SEYPR03MB8389:EE_
x-ms-office365-filtering-correlation-id: b497a623-6b13-4f50-a4e9-08dd8959f55e
x-ld-processed: a7687ede-7a6b-4ef6-bace-642f677fbe31,ExtAddr
x-ms-exchange-senderadcheck: 1
x-ms-exchange-antispam-relay: 0
x-microsoft-antispam: BCL:0;ARA:13230040|1800799024|7416014|376014|366016|13003099007|38070700018;
x-microsoft-antispam-message-info: =?utf-8?B?RDA3ZVVqYjd5SlJ1WG9YVnBJY0gvZ1lkc2hCd1FqblE5VThONG81a3RkTkZ3?=
 =?utf-8?B?eXVhS0h3THh0bmFDeTBoOHFyYU9VOEdOcm9WK2dROWMwTWw3R3gySFZ5dWRm?=
 =?utf-8?B?RzkxUU9RY2N0WTZoWDZRZW5OUlhzczIvNHVpVTVlK0IzK2FsbXZFdmF0enc5?=
 =?utf-8?B?N2dxYUFMUjZFRFhyY2EyV1BpWDhsZ0pLTVhweGhuWXovckkyR0NNSEF0VzVC?=
 =?utf-8?B?ZWFaOHVwUlh4MWlRMUZHdU56OFpYczVINU0xQnVmWmFOdXdJaFZYakRWZTVo?=
 =?utf-8?B?REhiaE5wcndOaDRVczBZcG9ZWGloZ25MUTJodFh6cTJrQzk1UEZJRkNKbUcw?=
 =?utf-8?B?QUlLdWJCdTErTU4rVlZYa3pLQThOQUU0d1RuRmVsa1NZOHZINWpPVzFkb09q?=
 =?utf-8?B?UWQ1ZndlNnFPZytIU2VQdzRVZHEyazlSaTV2Ri94YTQ0SGlVak0wS3FFbnBE?=
 =?utf-8?B?LytMRStldlh0TkRtNEl3TWJEaFNPR0Y4Rlc2S2YxSmtaSEgwb0lRdXNjYStO?=
 =?utf-8?B?UXpMRjBsVXgyKzlYcFhZMmtKOE1qam5FRUFDd3dQKzF6WXRsN1VPMk1PYTZY?=
 =?utf-8?B?M3p4VkszcXNBZTVvdzNUMkljeFBJcm9nRENXSW5pNnZSTVZzVDVoTEFWZEth?=
 =?utf-8?B?VnYybXpjV0FjaWdMS29uNnV6RllHeFhPbHc5aitsdnU1K1NuLzJXWXJKZyts?=
 =?utf-8?B?Nk1XTUlWS3JEbUFHQnRabzcyNTJ2Rld3V0ozaGVIc0hhQStkVE1GK3diNExr?=
 =?utf-8?B?QlhueWFsaHpyVlJ6WU1wbTBvamEyR2gwYy93cHg2cG82OU9MWmFvajUwMHR4?=
 =?utf-8?B?TXhJa1dKL3IrM2ovWmxRNDlZZkxQOFdZUCtwbm9XS1VueDgzaHBwbDU1N05p?=
 =?utf-8?B?M3RLaTYvL2xvcnp4aUhLWnhCN2lidkxKTzZZN3JQb2ppUW0zNmxuZG56WXI0?=
 =?utf-8?B?bDNZR0ljOHhEY09zVGhRY1d2cnJkMmxUVHUxQkdXZjFGY3lteFZnMFFQV0hn?=
 =?utf-8?B?ZzdQeUhWTTNaMk9XMm5HTndzalpFenlKTFNFSzRWUzlvcXRzS3hTQ001d3RS?=
 =?utf-8?B?Ny9Md0N2UkVodll0UUZrZzFGOUJTMmRldTdlK1VtRkdYeXcvM2llYW9VSEZn?=
 =?utf-8?B?eU9UNWhVY3RuaE9VL2FkSHovaC9wNURuMkZHOS9qZS95My9OQmxRdVRVTjRX?=
 =?utf-8?B?OHdKSWtmR0d0Q0gyQUhCUFVreGpKQzh4THR6SUFZTXV4dGxmOWMzTFBIdnVn?=
 =?utf-8?B?SHd4R2VCR2hUNmZ0Rjc0UW9BbU5TYjIxaGRHeHh4OERQdGR2ZFcrRTE3N2Fm?=
 =?utf-8?B?d0N6ZDN3c25KVTdoWEZGNzdCUG4zQ3BjVHhZQUpNZkVYU1lJeXZYdmZqUUtw?=
 =?utf-8?B?MUc1dTJUcm1rN0dxVHZWL2Q2VkpWTWJUeEZLdkNKWlJoN1FSOWJza21zTDZv?=
 =?utf-8?B?SkV6cDh3UDF6QWk3ZEo1UGVZcEN4SHBpb3ZQLzVDRm56aUExM0s1a0NWaGt1?=
 =?utf-8?B?VkNoT0JiRjVPREhueSs1cEJCUVRBeVRuZDFOYjIwd0VGRU5pTnlhSVRxbVh5?=
 =?utf-8?B?Q25oUEtvL3RnWHF4aUVmTjMyai94ZlZPOHI4WGZtV0VGYmFTOEZEeWx3N0hV?=
 =?utf-8?B?NTU4WnBNeXNsZEl2N3VRbEZGZmYyQ3JPQVJQUUJtWkdvQ1FacVZLZjFiMnFa?=
 =?utf-8?B?aFBGVG5OeWN4WmJlTzlWSHVmMlZLTFEyQklML2NRSy9OZDZuUGNlUVEvTW5E?=
 =?utf-8?B?ZTd5S3hEVkE2SkxDNitaUVpKOGJqN25DbHNzYXBUemZaS2sza1IyY3BnckJL?=
 =?utf-8?B?S2tkWXBZL29VUm12ZGtzOEcxVUhFYTkrVldXTHhmK0c3THk0eGF6Y2hKWDZE?=
 =?utf-8?B?VXduZC9DNCt1YVVJODBhamd1akNyUkpZbDUyQ2J5Yk9pdVlpVmRvdEFxc2pH?=
 =?utf-8?B?WWJxY1N0TFFUQkQ1c3ZwY05aOW5GZUNHam9iN1VtN3ZMeTUrcGllNVZ5UlJT?=
 =?utf-8?Q?yhXua7EczhcfLqY4W3xY07pS4wpFt8=3D?=
x-forefront-antispam-report: CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:PSAPR03MB5542.apcprd03.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(1800799024)(7416014)(376014)(366016)(13003099007)(38070700018);DIR:OUT;SFP:1101;
x-ms-exchange-antispam-messagedata-chunkcount: 1
x-ms-exchange-antispam-messagedata-0: =?utf-8?B?UjIrLy94VFN0c0xkdTllUm5HdjFJaGFzeGJHcHo3aVVGVk4waVdvY3Z0eTZZ?=
 =?utf-8?B?OVcwMDVXcEMzK2tOS2N3b002bWI2ck14OGtELzJ4OStubFJJNlVjWnhidFo1?=
 =?utf-8?B?S29LRW5YQXp5K2pDajNJQWtnUXc3bk0yTEk3N2QxYjRoemRGeFdKWjNHVWFN?=
 =?utf-8?B?bWNCN0xNVXgzMlRMYzBvRXBscXM0TE5Id2JiL0dueDVWNkJwZVpoQlE1VC83?=
 =?utf-8?B?eXNIaEllaGxCeVV5L1lYUXZvVlFhZmZEek9pelM1aUZ6QjlXL29Gakk4a0JW?=
 =?utf-8?B?dWxLYlgzVERVeFpFYnlvK0p4NEttTWI1YjMrRThrZWU3NkFKWllVNXBWVHZN?=
 =?utf-8?B?bTZoQ0swa0VRaVJvRWhqUGVhYXhKOVI3K296VkdmR0J5YU1EQ2JvWk1DTCt2?=
 =?utf-8?B?VFd3TmlTSU1aM3laNFJHZWZESnJkSWtkTmt1cFNIUnZyZThwSkV1cnd3eitx?=
 =?utf-8?B?V3dpM05uZEdUSEh3bjdTZE8raUlwMDFVNkdWdkVERXRFRnVWalU1QWVMdmdO?=
 =?utf-8?B?Q2xoSU1jczFoSEljY21QaWpna1BOcGo5ZDYxaWFXYmtrcGtrTXcvODZJamVh?=
 =?utf-8?B?UFppeUF5K0pQcDhreWliTHQvV3doalR6RzNnaUJWN0dvcE4zdXFFR3EzV0pT?=
 =?utf-8?B?bFN4STdaUXdjUGIvcmNra2lhTkhLaGlocmE0TmJBcHV5VnhzMEJDdjBMRmZp?=
 =?utf-8?B?eDV2dyt1Z1JoVXpoVU9tSmIzSUdIRnRlMXFML01kWEU5Rk5ud25QV2syRU1B?=
 =?utf-8?B?ZVhZYUV3Z2ljbDhORlBHZUY3aVBFVGd5a2FMb01keVZtZlVzMWpxeUhBOHN6?=
 =?utf-8?B?UEo4UURGTmoxSkFwcWE1TTBWeXRlZm1yNXJBKy9nRHhickZkNmE4bzRwSzVY?=
 =?utf-8?B?RmxZRGxDNTNDM3MzSXozUW5TaHE0RkgzcDJ2YU1PWm9QUmZMeHVtVk9lbnI0?=
 =?utf-8?B?WnFYdUdpSUxqZUZiMWlxcFNVamFCYytwRnltQktGL2JzWGVZN2N1elRya0hr?=
 =?utf-8?B?YVg5RlJhUlpnNjFxZmQ4c3lYWTBDWk9hNHQyYmpneTBwQ0pXR01xZjYxZzZG?=
 =?utf-8?B?UVZrcmhNOFhGR1lZWGk1dTczN0NWcTRXTEFGdUcwUXp1cnI2L2JteWFqbWor?=
 =?utf-8?B?dkFlZS9ZKzlKc0ptV3RRdmVobVViMmd0SlIraXNsaGgxVVdpR20xVHRTVUFW?=
 =?utf-8?B?MUVGakJZRDFiTElSUlp4SEs0aWk1eXZ5ZEdIUVhCQXlkYnB0Ni9VYmd2aEhS?=
 =?utf-8?B?RWJ2a2w5RmNoUXhydFpHamNvUm1QMlVMZ28yUlhCZUNaWmJrbVdrZmsrR0tP?=
 =?utf-8?B?MSt3S0J4cC9CMkI2dW02aUxvOUxiVjVPREF5bDdPTGRONnV1TzRMQzVNcDV5?=
 =?utf-8?B?K1puVmorcEFEejVVWS9GNURYWEFOU3R5cWdHajFscmxQdWVaZzZGaXVLSlU0?=
 =?utf-8?B?VFN1Y0xzUEJBL2RGeFJXN25OcGhPTWo4MlgxQzRWc2E0elJxYUIwdDBtKy93?=
 =?utf-8?B?WlJMNDBwRXkxL3hTcThJdXlVZzJQelEzbk1YUGNTZzJWVkVhZUdLZWwrK1dv?=
 =?utf-8?B?MmYrQ2prVDg4dWVxa05KS2dKQUwrOU9ISjN2djN1UHpyYldrTmRsVFlFOTlh?=
 =?utf-8?B?RExYc3VkdmUyREZYcUFublRISWp0Z3Zxd3c4TFdaaTFDWE1BUTRua0VIVDho?=
 =?utf-8?B?bm9WR0ZNT0ZYcER0dlRHbWNhY091T0NuR1NZZVd0eVB2VEM3dWtvNGJ1d3lu?=
 =?utf-8?B?L0NqWHc1d0xleVhHOTlNekc1YStFK3c0TVRGM2lNVm52dzZCZSsxSWxLZHpu?=
 =?utf-8?B?Y3YwVWV0ZGdtYzNyWDA2SloxMk91L2dGb1BtUFVucFI1N3drejg1L0I4UzBq?=
 =?utf-8?B?MXVvZ0cxQ29DVGZGSWZ6azBtR3hMSW9tdkF2Nmdaa2tZYkN4bm5IR3ZXa21H?=
 =?utf-8?B?VnVpNGdzamNpL0YzeHhvNEVoZElBSURSRVZENmFqYm91MFVBYXhuMEtlSGRW?=
 =?utf-8?B?ZytRM0NPQjFsL0JPNGJmWDRnd3plcGUwbVJaeEdrcWtZRWU2SXoycG9adVRF?=
 =?utf-8?B?dlg3UXBMVC9BV2xvSHJacFRHQVo0bW9mcStRbGRIYXpVcUs5Um5GQ0hBR01S?=
 =?utf-8?B?eVNtcVVjbndrOHFQc1l2OHJ5Zk8yOVZ3Uks2M0Jmb2NNTU5vUlVuMjlhbmRv?=
 =?utf-8?B?Qnc9PQ==?=
Content-Type: text/plain; charset="utf-8"
Content-ID: <4BBCF5732CD12048A827B69D27469D5C@apcprd03.prod.outlook.com>
Content-Transfer-Encoding: base64
Precedence: bulk
X-Mailing-List: linux-kernel@vger.kernel.org
List-Id: <linux-kernel.vger.kernel.org>
List-Subscribe: <mailto:linux-kernel+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-kernel+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-AuthSource: PSAPR03MB5542.apcprd03.prod.outlook.com
X-MS-Exchange-CrossTenant-Network-Message-Id: b497a623-6b13-4f50-a4e9-08dd8959f55e
X-MS-Exchange-CrossTenant-originalarrivaltime: 02 May 2025 09:16:01.7605
 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: a7687ede-7a6b-4ef6-bace-642f677fbe31
X-MS-Exchange-CrossTenant-mailboxtype: HOSTED
X-MS-Exchange-CrossTenant-userprincipalname: HQPW72d7ssMGmT2zPCStGNaTGmA6eeDyS66xPCSnQvvswyvDtvI1I7SjEsxaWmFHMDB/71KTNHksPTlr3V/KmMWaO2+babAYu8Olu/RHghg=
X-MS-Exchange-Transport-CrossTenantHeadersStamped: SEYPR03MB8389

T24gVGh1LCAyMDI1LTA1LTAxIGF0IDEwOjAyIC0wNDAwLCBKb2hhbm5lcyBXZWluZXIgd3JvdGU6
DQoNCg0KPiBFeHRlcm5hbCBlbWFpbCA6IFBsZWFzZSBkbyBub3QgY2xpY2sgbGlua3Mgb3Igb3Bl
biBhdHRhY2htZW50cyB1bnRpbA0KeW91IGhhdmUgdmVyaWZpZWQgdGhlIHNlbmRlciBvciB0aGUg
Y29udGVudC4NCj4gDQo+IA0KPiBPbiBXZWQsIEFwciAzMCwgMjAyNSBhdCAwNDoyNjo0MVBNICsw
ODAwLCBRdW4tV2VpIExpbiB3cm90ZToNCj4gDQo+ID4gVGhpcyBwYXRjaCBzZXJpZXMgaW50cm9k
dWNlcyBhIG5ldyBtZWNoYW5pc20gY2FsbGVkIGtjb21wcmVzc2QgdG8NCj4gPiBpbXByb3ZlIHRo
ZSBlZmZpY2llbmN5IG9mIG1lbW9yeSByZWNsYWltaW5nIGluIHRoZSBvcGVyYXRpbmcNCnN5c3Rl
bS4NCj4gPiANCj4gPiBQcm9ibGVtOg0KPiA+IMKgIEluIHRoZSBjdXJyZW50IHN5c3RlbSwgdGhl
IGtzd2FwZCB0aHJlYWQgaXMgcmVzcG9uc2libGUgZm9yIGJvdGgNCnNjYW5uaW5nDQo+ID4gwqAg
dGhlIExSVSBwYWdlcyBhbmQgaGFuZGxpbmcgbWVtb3J5IGNvbXByZXNzaW9uIHRhc2tzIChzdWNo
IGFzDQp0aG9zZQ0KPiA+IMKgIGludm9sdmluZyBaU1dBUC9aUkFNLCBpZiBlbmFibGVkKS4gVGhp
cyBjb21iaW5lZCByZXNwb25zaWJpbGl0eQ0KY2FuIGxlYWQNCj4gPiDCoCB0byBzaWduaWZpY2Fu
dCBwZXJmb3JtYW5jZSBib3R0bGVuZWNrcywgZXNwZWNpYWxseSB1bmRlciBoaWdoDQptZW1vcnkN
Cj4gPiDCoCBwcmVzc3VyZS4gVGhlIGtzd2FwZCB0aHJlYWQgYmVjb21lcyBhIHNpbmdsZSBwb2lu
dCBvZiBjb250ZW50aW9uLA0KY2F1c2luZw0KPiA+IMKgIGRlbGF5cyBpbiBtZW1vcnkgcmVjbGFp
bWluZyBhbmQgb3ZlcmFsbCBzeXN0ZW0gcGVyZm9ybWFuY2UNCmRlZ3JhZGF0aW9uLg0KPiA+IA0K
PiA+IFNvbHV0aW9uOg0KPiA+IMKgIEludHJvZHVjZWQga2NvbXByZXNzZCB0byBoYW5kbGUgYXN5
bmNocm9ub3VzIGNvbXByZXNzaW9uIGR1cmluZw0KbWVtb3J5DQo+ID4gwqAgcmVjbGFpbSwgaW1w
cm92aW5nIGVmZmljaWVuY3kgYnkgb2ZmbG9hZGluZyBjb21wcmVzc2lvbiB0YXNrcw0KZnJvbQ0K
PiA+IMKgIGtzd2FwZC4gVGhpcyBhbGxvd3Mga3N3YXBkIHRvIGZvY3VzIG9uIGl0cyBwcmltYXJ5
IHRhc2sgb2YgcGFnZQ0KcmVjbGFpbQ0KPiA+IMKgIHdpdGhvdXQgYmVpbmcgYnVyZGVuZWQgYnkg
dGhlIGFkZGl0aW9uYWwgb3ZlcmhlYWQgb2YgY29tcHJlc3Npb24uDQo+ID4gDQo+ID4gSW4gb3Vy
IGhhbmRoZWxkIGRldmljZXMsIHdlIGZvdW5kIHRoYXQgYXBwbHlpbmcgdGhpcyBtZWNoYW5pc20N
CnVuZGVyIGhpZ2gNCj4gPiBtZW1vcnkgcHJlc3N1cmUgc2NlbmFyaW9zIGNhbiBpbmNyZWFzZSB0
aGUgcmF0ZSBvZiBwZ3N0ZWFsX2Fub24gcGVyDQpzZWNvbmQNCj4gPiBieSBvdmVyIDI2MCUgY29t
cGFyZWQgdG8gdGhlIHNpdHVhdGlvbiB3aXRoIG9ubHkga3N3YXBkLg0KQWRkaXRpb25hbGx5LCB3
ZQ0KPiA+IG9ic2VydmVkIGEgcmVkdWN0aW9uIG9mIG92ZXIgNTAlIGluIHBhZ2UgYWxsb2NhdGlv
biBzdGFsbA0Kb2NjdXJyZW5jZXMsDQo+ID4gZnVydGhlciBkZW1vbnN0cmF0aW5nIHRoZSBlZmZl
Y3RpdmVuZXNzIG9mIGtjb21wcmVzc2QgaW4NCmFsbGV2aWF0aW5nIG1lbW9yeQ0KPiA+IHByZXNz
dXJlIGFuZCBpbXByb3Zpbmcgc3lzdGVtIHJlc3BvbnNpdmVuZXNzLg0KPiANCj4gDQo+IFllcywg
SSB0aGluayBwYXJhbGxlbGl6aW5nIHRoaXMgd29yayBtYWtlcyBhIGxvdCBvZiBzZW5zZS4NCj4g
DQo+IA0KPiA+IENvLWRldmVsb3BlZC1ieTogQmFycnkgU29uZw0KPFsyMWNuYmFvQGdtYWlsLmNv
bV0obWFpbHRvOjIxY25iYW9AZ21haWwuY29tKT4NCj4gPiBTaWduZWQtb2ZmLWJ5OiBCYXJyeSBT
b25nDQo8WzIxY25iYW9AZ21haWwuY29tXShtYWlsdG86MjFjbmJhb0BnbWFpbC5jb20pPg0KPiA+
IFNpZ25lZC1vZmYtYnk6IFF1bi1XZWkgTGluDQo8W3F1bi13ZWkubGluQG1lZGlhdGVrLmNvbV0o
bWFpbHRvOnF1bi13ZWkubGluQG1lZGlhdGVrLmNvbSk+DQo+ID4gUmVmZXJlbmNlOiBSZTogW1BB
VENIIDAvMl0gSW1wcm92ZSBacmFtIGJ5IHNlcGFyYXRpbmcgY29tcHJlc3Npb24NCmNvbnRleHQg
ZnJvbSBrc3dhcGQgLSBCYXJyeSBTb25nDQo+ID4gwqDCoMKgwqDCoMKgwqDCoMKgwqANCltodHRw
czovL2xvcmUua2VybmVsLm9yZy9sa21sLzIwMjUwMzEzMDkzMDA1LjEzOTk4LTEtMjFjbmJhb0Bn
bWFpbC5jb20vXShodHRwczovL2xvcmUua2VybmVsLm9yZy9sa21sLzIwMjUwMzEzMDkzMDA1LjEz
OTk4LTEtMjFjbmJhb0BnbWFpbC5jb20vKQ0KPiA+IC0tLQ0KPiA+IMKgaW5jbHVkZS9saW51eC9t
bXpvbmUuaCB8wqAgNiArKysrDQo+ID4gwqBtbS9tbV9pbml0LmPCoMKgwqDCoMKgwqDCoMKgwqDC
oCB8wqAgMSArDQo+ID4gwqBtbS9wYWdlX2lvLmPCoMKgwqDCoMKgwqDCoMKgwqDCoCB8IDcxDQor
KysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysNCj4gPiDCoG1tL3N3YXAu
aMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgIHzCoCA2ICsrKysNCj4gPiDCoG1tL3Ztc2Nhbi5j
wqDCoMKgwqDCoMKgwqDCoMKgwqDCoCB8IDI1ICsrKysrKysrKysrKysrKw0KPiA+IMKgNSBmaWxl
cyBjaGFuZ2VkLCAxMDkgaW5zZXJ0aW9ucygrKQ0KPiA+IA0KPiA+IGRpZmYgLS1naXQgYS9pbmNs
dWRlL2xpbnV4L21tem9uZS5oIGIvaW5jbHVkZS9saW51eC9tbXpvbmUuaA0KPiA+IGluZGV4IDZj
Y2VjMWJmMjg5Ni4uOTNjOTE5NWE1NGFlIDEwMDY0NA0KPiA+IC0tLSBhL2luY2x1ZGUvbGludXgv
bW16b25lLmgNCj4gPiArKysgYi9pbmNsdWRlL2xpbnV4L21tem9uZS5oDQo+ID4gQEAgLTIzLDYg
KzIzLDcgQEANCj4gPiDCoCNpbmNsdWRlIDxsaW51eC9wYWdlLWZsYWdzLmg+DQo+ID4gwqAjaW5j
bHVkZSA8bGludXgvbG9jYWxfbG9jay5oPg0KPiA+IMKgI2luY2x1ZGUgPGxpbnV4L3pzd2FwLmg+
DQo+ID4gKyNpbmNsdWRlIDxsaW51eC9rZmlmby5oPg0KPiA+IMKgI2luY2x1ZGUgPGFzbS9wYWdl
Lmg+DQo+ID4gDQo+ID4gwqAvKiBGcmVlIG1lbW9yeSBtYW5hZ2VtZW50IC0gem9uZWQgYnVkZHkg
YWxsb2NhdG9yLsKgICovDQo+ID4gQEAgLTEzOTgsNiArMTM5OSwxMSBAQCB0eXBlZGVmIHN0cnVj
dCBwZ2xpc3RfZGF0YSB7DQo+ID4gDQo+ID4gwqDCoMKgwqDCoCBpbnQga3N3YXBkX2ZhaWx1cmVz
O8KgwqDCoMKgwqDCoMKgwqDCoMKgwqAgLyogTnVtYmVyIG9mICdyZWNsYWltZWQgPT0gMCcNCnJ1
bnMgKi8NCj4gPiANCj4gPiArI2RlZmluZSBLQ09NUFJFU1NfRklGT19TSVpFIDI1Ng0KPiA+ICvC
oMKgwqDCoCB3YWl0X3F1ZXVlX2hlYWRfdCBrY29tcHJlc3NkX3dhaXQ7DQo+ID4gK8KgwqDCoMKg
IHN0cnVjdCB0YXNrX3N0cnVjdCAqa2NvbXByZXNzZDsNCj4gPiArwqDCoMKgwqAgc3RydWN0IGtm
aWZvIGtjb21wcmVzc19maWZvOw0KPiANCj4gDQo+IFRoZSB3YXkgeW91IGltcGxlbWVudGVkIHRo
aXMgYWRkcyB0aW1lLWFuZC1zcGFjZSBvdmVyaGVhZCBldmVuIG9uDQo+IHN5c3RlbXMgdGhhdCBk
b24ndCBoYXZlIGFueSBzb3J0IG9mIHN3YXAgY29tcHJlc3Npb24gZW5hYmxlZC4NCj4NCg0KDQpU
byBhZGRyZXNzIHRoZSBvdmVyaGVhZCBjb25jZXJuLCBwZXJoYXBzIHdlIGNhbiBlbWJlZCBvbmx5
IGEgc2luZ2xlDQprY29tcHJlc3NkIHBvaW50ZXIgd2l0aGluIHBnbGlzdF9kYXRhIGFuZCBwZXJm
b3JtIGxhenkgaW5pdGlhbGl6YXRpb24NCm9ubHkgd2hlbiBhIHpyYW0gZGV2aWNlIGlzIGFkZGVk
IG9yIHpzd2FwIGlzIGVuYWJsZWQuDQoNCg0KPiBUaGF0IHNlZW1zIHVubmVjZXNzYXJ5LiBUaGVy
ZSBpcyBhbiBleGlzdGluZyBtZXRob2QgZm9yIGFzeW5jaHJvbm91cw0KPiB3cml0ZWJhY2ssIGFu
ZCBwYWdlb3V0KCkgaXMgbmF0dXJhbGx5IGZ1bGx5IHNldCB1cCB0byBoYW5kbGUgdGhpcy4NCj4g
DQo+IElNTyB0aGUgYmV0dGVyIHdheSB0byBkbyB0aGlzIGlzIHRvIG1ha2UgenN3YXBfc3RvcmUo
KSAoYW5kDQo+IHpyYW1fYmlvX3dyaXRlKCk/KSBhc3luY2hyb25vdXMuIE1ha2UgdGhvc2UgZnVu
Y3Rpb25zIHF1ZXVlIHRoZSB3b3JrDQo+IGFuZCB3YWtlIHRoZSBjb21wcmVzc2lvbiBkYWVtb24s
IGFuZCB0aGVuIGhhdmUgdGhlIGRhZW1vbiBjYWxsDQo+IGZvbGlvX2VuZF93cml0ZWJhY2soKSAv
IGJpb19lbmRpbygpIHdoZW4gaXQncyBkb25lIHdpdGggaXQuDQoNCg0KDQpQZXJoYXBzIHdlIGNv
dWxkIGFkZCBhbiBlbnF1ZXVlL3dha2UtdXBrY29tcHJlc3NkIGludGVyZmFjZSBhbmQgY2FsbCBp
dA0Kd2l0aGluIHpzd2FwX3N0b3JlKCkgYW5kIHpyYW1fYmlvX3dyaXRlKCkuIFRoaXMgd291bGQg
bGV2ZXJhZ2UgdGhlDQpleGlzdGluZyBvYmpfY2dyb3VwX21heV96c3dhcCgpIGNoZWNrIGluIHpz
d2FwX3N0b3JlKCksIGl0IHNvbHZlZCB0aGUNCnByb2JsZW0gdGhhdCB6c3dhcCBpcyByZS1jb21w
cmVzc2VkIHRvbyBzb29uLiBhcyBtZW50aW9uZWQgYnkgTmhhdC4NCg0KSW4gb3V0bGluZToNCg0K
MS4gUGVyLW5vZGUgcG9pbnRlciBpbiBwZ2xpc3RfZGF0YTogIA0KDQogICB0eXBlZGVmIHN0cnVj
dCBwZ2xpc3RfZGF0YSB7ICANCiAgIC4uLiAgDQogICBzdHJ1Y3Qga2NvbXByZXNzZF9ub2RlICpr
Y29tcHJlc3NkOyAgDQogICAuLi4gIA0KICAgfQ0KDQoyLiBHbG9iYWwgcmVnaXN0ZXIvdW5yZWdp
c3RlciBob29rczogIA0KDQogICBrY29tcHJlc3NkX3JlZ2lzdGVyX2JhY2tlbmQoKTogUmVnaXN0
ZXIgYSBuZXcgYmFja2VuZCAoenJhbS96c3dhcCkuDQogICBJbml0aWFsaXplIHRoZSBrY29tcHJl
c3NkIHN0cnVjdHVyZSBhbmQga2ZpZm8gaWYgdGhpcyBpcyB0aGUgZmlyc3QgDQogICBjYWxsLg0K
ICAgDQogICBrY29tcHJlc3NkX3VucmVnaXN0ZXJfYmFja2VuZCgpOiBVbnJlZ2lzdGVyIGEgYmFj
a2VuZCAoenJhbS96c3dhcCkuDQogICBVc2UgYSBwZXItbm9kZSByZWZjb3VudCBhbmQgYml0bWFw
IHRvIHRyYWNrIGhvdyBtYW55enN3YXAvenJhbSAgIA0KICAgaW5zdGFuY2VzIGFyZSBhY3RpdmUu
IElmIHRoZSBsYXN0IGJhY2tlbmQgaXMgdW5yZWdpc3RlcmVkLCBmcmVlICAgDQogICB0aGUga2Nv
bXByZXNzZCByZXNvdXJjZXMuDQoNCj4gPiBBIG5ldCBsb3NzIGlzIHBvc3NpYmxlLCBidXQga3N3
YXBkIGNhbiBzb21ldGltZXMgZW50ZXIgc2xlZXANCj4gPiBjb250ZXh0cywNCj4gPiBhbGxvd2lu
ZyB0aGUgcGFyYWxsZWwga2NvbXByZXNzZCB0aHJlYWQgdG8gY29udGludWUgY29tcHJlc3Npb24u
DQo+ID4gVGhpcyBjb3VsZCBhY3R1YWxseSBiZSBhIHdpbi4gQnV0IEkgYWdyZWUgdGhhdCBhZGRp
dGlvbmFsIHRlc3RpbmcNCm9uDQo+ID4gc2luZ2xlLUNQVSBtYWNoaW5lcyBtYXkgYmUgbmVjZXNz
YXJ5Lg0KPiANCj4gSXQgY291bGQgYmUgZGlzYWJsZWQgYnkgdGhlIGZvbGxvd2luZyBpZiB3ZSBk
aXNjb3ZlciBhbnkgcmVncmVzc2lvbg0KPiBvbg0KPiBzaW5nbGUtQ1BVIG1hY2hpbmVzPw0KPiAN
Cj4gaWYgKG51bV9vbmxpbmVfY3B1cygpID09IDEpDQo+ICAgICAgcmV0dXJuIGZhbHNlOw0KPg0K
DQogICBXZSBjYW4gYWRkIHRoaXMgY2hlY2sgaW4gdGhlIHJlZ2lzdGVyL3VucmVnaXN0ZXIgZnVu
Y3Rpb24uDQoNCjMuIEVucXVldWUgQVBJOiAgDQoNCiAgIGtjb21wcmVzc2RfZW5xdWV1ZV9mb2xp
byhmb2xpbykgL2tjb21wcmVzc2RfZW5xdWV1ZV9iaW8oYmlvKTogUHVzaCBhDQogICBqb2IgdG8g
dGhlIGtjb21wcmVzc2TigJlzIEZJRk8gYW5kIHdha2UgdXAgdGhlIGtjb21wcmVzc2QgZGFlbW9u
Lg0KDQpXaXRoIHRoaXMgYXBwcm9hY2gsIHRoZXJlIGlzIHplcm8gcnVudGltZSBjb3N0IG9uIG5v
ZGVzIHdoZW4gbm8gYmFja2VuZA0KaXMgYWN0aXZlIGFuZCBvbmx5IG9uZSBhbGxvY2F0aW9uIHBl
ciBub2RlLg0KDQoNClRoYW5rIHlvdSBmb3IgeW91ciBmZWVkYmFjayEgIA0KUGxlYXNlIGxldCBt
ZSBrbm93IHdoYXQgeW91IHRoaW5rLg0KDQpCZXN0IFJlZ2FyZHMsICANClF1bi13ZWkNCg0KDQoN
Cg==

